{"version":3,"sources":["App.js","apis/ipeds_consts.js","apis/utils.js","apis/ipeds.js","apis/pdx_data.js","apis/apiData.js","GradLegalSex.js","RaceGrad.js","Persistence.js","About.js","Grid.js","index.js"],"names":["App","class","FALL_RETENTION","FALL_ENROLLMENT","GRAD_6YR","GRAD_6YR_COUNT","ALL","MISSING","NA","SUPPRESSED","MALE","FEMALE","UNKNOWN","EARLIEST","LATEST","PDX_UNITID","range","start","end","interval","diff","len","Math","floor","Array","keys","map","i","resultOrZero","x","f","v","zero","unzip","arr","min","a","length","zip","b","arguments","res","push","from","BASE","API","getFallEnrollmentByRace","unitid","_","levelOfStudy","api","endpt","params","URLSearchParams","append","year","url","URL","fetch","then","e","ok","json","data","temp","filter","itm","Number","parseInt","sort","r","p","label","getFallRetention","results","getGradRates","filters","race","subcohort","ipeds","Object","female","male","unknown","total","find","toFixed","baseUrl","process","gradDemo","retention","fetchJson","gradDemoBy","feature","as","gradDemoData","years","totals","k","pair","retentionBy","retentionData","init","final","ft_init","ft_final","chartData","xArray","yArray","series","labels","datasets","mergeData","res_labels","d","reduce","concat","n","findIndex","splice","mergeArrays","res_datasets","ds","y_temp","fill","entries","applyColors","colors","c","type","pdxDataCounts","keepTotals","startYear","endYear","ftpt","gradRates","legend","display","position","fontColor","fontSize","options","isPercent","opts","scales","yAxes","stacked","ticks","beginAtZero","xAxes","tooltips","mode","responsive","maintainAspectRatio","max","backgroundColor","GradLegalSex","props","newdata","race_ethnicity","Asian","borderColor","Black","Hispanic","International","Two","Unknown","White","LineChart","styling","borderWidth","Persistence","About","ResponsiveReactGridLayout","WidthProvider","Responsive","chart3","RaceGrad","chart6","Grid","state","1","2","3","4","5","pdxDataPercents","setState","legalSexPercent","catch","finally","legalSexCounts","legalSexPersistence","queryIpeds","ipedsGradLegalSex","gridItems","id","name","chart","layouts","lg","y","w","h","measureBeforeMount","className","autoSize","rowHeight","this","isDragable","isResizable","onDrag","onDragging","onDragStop","onMoveCard","onResizeStop","onResizeCard","margin","item","style","width","height","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kwBAmBeA,MAVf,WACE,OACE,qBAAKC,MAAM,SAAX,SACE,qBAAKA,MAAM,QAAX,SACE,6D,uFCZKC,EAAiB,iBACjBC,EAAkB,kBAClBC,EAAW,aAEXC,EAAiB,oBAGjBC,EAAM,GACNC,GAAW,EACXC,GAAM,EACNC,GAAc,EAEdC,EAAO,EACPC,EAAS,EACTC,EAAU,EAGVC,EAAW,KACXC,EAAS,KAGTC,EAAa,O,QCA1B,SAASC,EAAMC,EAAOC,GAAoB,IAAfC,EAAc,uDAAH,EAC/BC,EAAOF,EAAMD,EACbI,EAAMC,KAAKC,MAAMH,EAAOD,KAAcC,EAAOD,IACnD,OAAO,YAAIK,MAAMH,GAAKI,QAAQC,KAAI,SAACC,GAAD,OAAOR,EAAWQ,EAAIV,KAKzD,SAASW,EAAaC,GAA0B,IAAvBC,EAAsB,uDAAlB,SAACC,GAAD,OAAOA,GAAGC,EAAQ,uDAAH,EAC3C,OAAKH,EAIEC,EAAED,GAHDG,EAMT,SAASC,EAAMC,GAGd,OAAOlB,EAAM,EAFKM,KAAKa,IAAL,MAAAb,KAAI,YAAQY,EAAIR,KAAI,SAACU,GAAD,OAAOA,EAAEC,aAEpBX,KAAI,SAACC,GAAD,OAAOO,EAAIR,KAAI,SAACU,GAAD,OAAOA,EAAET,SAKxD,SAASW,EAAIF,EAAGG,GAAI,IAAD,YAClB,KAAIC,UAAUH,OAAS,GAAvB,CAOA,IAHA,IAAMhB,EAAMC,KAAKa,IAAIC,EAAEC,OAAQE,EAAEF,QAE7BI,EAAM,GAPQ,WAQTd,GACRc,EAAIC,KAAKlB,MAAMmB,KAAKH,GAAWd,KAAI,SAAAQ,GAAG,OAAIA,EAAIP,QADtCA,EAAI,EAAGA,EAAIN,EAAKM,IAAM,EAAtBA,GAIT,OAAOc,GCxCR,IAAMG,EAAO,mCACPC,EAAM,mC,SAIGC,E,8EAAf,WACCC,GADD,6CAAAX,EAAA,yDAECnB,EAFD,+BAES+B,EACR9B,EAHD,+BAGO8B,EACNC,EAJD,+BAIgBD,EAEVD,EANN,yCAOS,MAPT,OAUOG,EAAML,EAAMG,EACZG,EAAQ,aAEVC,EAAS,IAAIC,iBACVC,OAAO,SAAUP,GACxBK,EAAOE,OAAO,MAAO,IAEjBb,EAAM,GACDc,EAAOtC,EAlBjB,aAkBwBsC,GAAQrC,GAlBhC,wBAmBMsC,EAAM,IAAIC,IAAJ,UACNP,EADM,YACCK,EADD,YACSN,EADT,YACyBE,EADzB,YACkCC,GAC3CR,GArBH,UAwBgBc,MAAMF,GAClBG,MAAK,SAACC,GAEN,GAAIA,EAAEC,GACL,OAAOD,EAAEE,UAIVH,MAAK,SAACI,GAIN,IAAIC,EAAOD,EAAKE,QACf,SAACC,GAAD,OAAyC,KAAhCC,OAAOC,SAASF,EAAG,QAM7B,OAJAF,EAAOA,EAAKtC,KAAI,SAACwC,GAAD,MAAS,CACxBC,OAAOC,SAASF,EAAG,MACnBC,OAAOC,SAASF,EAAG,qBAEb1C,MAAMwC,GAAMK,UA3CvB,QAwBMC,EAxBN,OA8CE7B,EAAIC,KAAK4B,GA9CX,QAkBqCf,IAlBrC,iDAiDQtB,EAAMQ,GACXf,IAAIO,GACJP,KAAI,SAAC6C,GACL,MAAO,CAAEC,MAAOD,EAAE,GAAG,GAAIR,KAAMQ,EAAE,QApDpC,6C,+BAyDeE,E,8EAAf,WAAgC1B,GAAhC,yCAAAX,EAAA,yDAAwCnB,EAAxC,+BAAgD+B,EAAY9B,EAA5D,+BAAkE8B,EAC5DD,EADN,yCAES,MAFT,OAKOG,EAAML,EAAM,kBAGdO,EAAS,IAAIC,iBACVC,OAAO,SAAUP,GAExBK,EAAOE,OAAO,OAAQ,IAElBb,EAAM,GACDc,EAAOtC,EAdjB,aAcwBsC,GAAQrC,GAdhC,wBAeMsC,EAAM,IAAIC,IAAJ,UAAWP,EAAX,YAAkBK,EAAlB,aAA2BH,GAAUR,GAfjD,UAiBgBc,MAAMF,GAAKG,MAAK,SAACC,GAE7B,GAAIA,EAAEC,GACL,OAAOD,EAAEE,UAGRH,MAAK,SAACI,GAER,OAAOA,EAAKW,QAAQ,GAAb,kBAzBX,SAiBMJ,EAjBN,SA8BG7B,EAAIC,KAAK4B,GA9BZ,QAcqCf,IAdrC,iDAkCQd,GAlCR,6C,+BAwCekC,E,8EAAf,WAA4B5B,GAA5B,+CAAAX,EAAA,yDAAqCnB,EAArC,+BAA6C+B,EAAY9B,EAAzD,+BAA+D8B,EAAU4B,EAAzE,+BAAiF,CAAEC,KAAM7B,EAAO8B,UAAW9B,GACrGD,EADN,yCAES,MAFT,OAYI,IAPGG,EAAML,EAAMkC,EAAM3E,UAGpBgD,EAAS,IAAIC,iBACPC,OAAO,SAAUP,GAGxB,MAAciC,OAAOvD,KAAKmD,GAA1B,eAAS9C,EAA2B,KAChCsB,EAAOE,OAAOxB,EAAG8C,EAAQ9C,IAGzBW,EAAM,CACNwC,OAAQ,GACRC,KAAM,GACNC,QAAS,IAGP5B,EAAOtC,EAtBjB,aAsBwBsC,GAAQrC,GAtBhC,wBAuBQsC,EAAM,IAAIC,IAAJ,UAAWP,EAAX,YAAkBK,EAAlB,aAA2BH,GAAUR,GAvBnD,UAyBQc,MAAMF,GAAKG,MAAK,SAACC,GAErB,GAAIA,EAAEC,GACL,OAAOD,EAAEE,UAGRH,MAAK,SAACI,GAER,OAAOA,EAAKW,WACDf,MAAK,SAAAW,GACJ,IAAMc,EAAQxD,EAAa0C,EAAEe,MAAK,SAAAzB,GAAC,OAAIA,EAAC,MAAYZ,MAAQ,SAAAjB,GAAC,OAAIA,EAAEiB,KAAmB,GAChFkC,EAAOtD,EAAa0C,EAAEe,MAAK,SAAAzB,GAAC,OAAIA,EAAC,MAAYZ,MAAS,SAAAjB,GAAC,OAAIA,EAAEiB,KAAmB,GAChFiC,EAASrD,EAAa0C,EAAEe,MAAK,SAAAzB,GAAC,OAAIA,EAAC,MAAYZ,MAAW,SAAAjB,GAAC,OAAIA,EAAEiB,KAAmB,GACpFmC,EAAUvD,EAAa0C,EAAEe,MAAK,SAAAzB,GAAC,OAAIA,EAAC,MAAYZ,MAAY,SAAAjB,GAAC,OAAIA,EAAEiB,KAAmB,GAE5FP,EAAIyC,KAAKxC,MAAOwC,EAAOE,EAAS,KAAKE,QAAQ,IAC7C7C,EAAIwC,OAAOvC,MAAOuC,EAASG,EAAS,KAAKE,QAAQ,IACjD7C,EAAI0C,QAAQzC,MAAOyC,EAAUC,EAAS,KAAKE,QAAQ,OA1CnE,QAsBqC/B,IAtBrC,iDA8CWd,GA9CX,6C,sBC/GO,IAMD8C,EAAUC,2BACVC,EAAWF,EAAU,yBACrBG,EAAYH,EAAU,iB,SAEbI,E,8EAAf,WAAyBnC,GAAzB,SAAApB,EAAA,+EACQsB,MAAMF,GAAKG,MAAK,SAACW,GAAD,OAAOA,EAAER,WADjC,4C,+BA2Be8B,E,8EAAf,WAA0BC,GAA1B,IAAAC,EAAA,mCAAA1D,EAAA,6DAAmC0D,EAAnC,+BAAwC,UAAxC,SAC0BH,EAAUF,GADpC,OAYC,IAXIM,EADL,OAEOC,EAAQD,EAAaC,MACrBC,EAASF,EAAa,mBAExBrB,EAAU,CACbsB,MAAOA,EACPjC,KAAM,IAEI,YAAP+B,IACHpB,EAAQX,KAAKkC,OAASA,GAEvB,MAAcjB,OAAOvD,KAAKsE,EAAaF,IAAvC,eAASK,EAAyC,KAEhDxB,EAAQX,KAAKmC,GADH,YAAPJ,EACexD,EACjB2D,EACAF,EAAaF,GAASK,IACrBxE,KAAI,SAACyE,GAAD,OAAYA,EAAK,GAAKA,EAAK,GAAM,KAAKb,QAAQ,MAElCS,EAAaF,GAASK,GAnB3C,yBAuBQxB,GAvBR,6C,+BAkDe0B,G,iFAAf,WAA2BP,GAA3B,IAAAC,EAAA,uCAAA1D,EAAA,6DAAoC0D,EAApC,+BAAyC,UAAzC,SAC6BH,EAAUD,GADvC,OAwBC,IAvBMW,EADP,OAEOL,EAAQK,EAAcL,MACxBC,EAAS,CACZK,KAAMD,EAAc,qBAAqBjB,MACzCmB,MAAOF,EAAc,wBAAwBjB,OAEnC,YAAPU,IACHG,EAAS3D,EAAI2D,EAAOK,KAAML,EAAOM,OAAO7E,KAAI,SAACyE,GAAD,OACzCA,EAAK,GAAKA,EAAK,GAAM,KAAKb,QAAQ,OAIhCkB,EAAUH,EAAc,qBAAqBR,GAC7CY,EAAWJ,EAAc,wBAAwBR,GAInDnB,EAAU,CACbsB,MAAOA,EACPjC,KAAM,CACLkC,OAAQA,IAGV,MAAcjB,OAAOvD,KAAK+E,GAA1B,eAASN,EAA2B,KACnCxB,EAAQX,KAAKmC,GAAK,CACjBI,KAAME,EAAQN,GACdK,MAAOE,EAASP,IAGN,YAAPJ,IACHpB,EAAQX,KAAKmC,GAAK5D,EACjBoC,EAAQX,KAAKmC,GAAGI,KAChB5B,EAAQX,KAAKmC,GAAGK,OACf7E,KAAI,SAACyE,GAAD,OAAYA,EAAK,GAAKA,EAAK,GAAM,KAAKb,QAAQ,OAlCvD,yBAsCQZ,GAtCR,6C,sBC7EA,SAASgC,GAAUC,EAAQC,GAAsB,IAAdC,EAAa,uDAAJ,GAC3C,MAAO,CACNC,OAAQH,EACRI,SAAU,CACT,CACCvC,MAAOqC,EACP9C,KAAM6C,KAQV,SAASI,GAAUD,GAClB,IAD4B,EACtBE,EAAaF,EACjBrF,KAAI,SAACwF,GAAD,OAAOA,EAAEJ,UACbK,QAAO,SAAC/E,EAAGwB,GAAJ,OHjCV,SAAqBxB,EAAGG,GACvB,IAAIZ,EAAI,EACJc,EAAM,GACVA,EAAMA,EAAI2E,OAAOhF,GAAGiC,OAHM,oBAIZ9B,GAJY,yBAIjB8E,EAJiB,SAMd,KADX1F,EAAIc,EAAI6E,WAAU,SAAC1D,GAAD,OAAOyD,GAAKzD,MAG7BnB,EAAIC,KAAK2E,GACCA,IAAM5E,EAAId,IAEpBc,EAAI8E,OAAO5F,EAAG,EAAG0F,IAPnB,2BAAkB,IAJQ,8BAe1B,OAAO5E,EGkBY+E,CAAYpF,EAAGwB,MAE9B6D,EAAe,GALS,cAMbV,GANa,IAM5B,2BAAyB,CAAC,IAAD,EAAhBW,EAAgB,QACpBC,EAAS,IAAInG,MAAMyF,EAAW5E,QAAQuF,KAAK,GADvB,cAEVF,EAAGX,UAFO,IAExB,2BAA2B,CAAC,IAAD,EAAlBG,EAAkB,sBACPQ,EAAGZ,OAAOe,WADH,kDAChBlG,EADgB,KACbI,EADa,KAEzB4F,EAAOV,EAAWK,WAAU,SAACzF,GAAD,OAAOA,IAAME,MAAMmF,EAAEnD,KAAKpC,IADvD,2BAAyC,IADf,8BAI1B8F,EAAa/E,KAAK,CAAE8B,MAAO0C,EAAE1C,MAAOT,KAAM4D,KANnB,gCANG,8BAgB5B,MAAO,CAAEb,OAAQG,EAAYF,SAAUU,GASxC,SAASK,GAAY/D,EAAMgE,GAC1B,MAAO,CACNjB,OAAQ/C,EAAK+C,OACbC,SAAUzE,EAAIyB,EAAKgD,SAAUgB,GAAQrG,KAAI,YACxC,IADqD,IAAD,mBAAVwF,EAAU,KAAPc,EAAO,KACpD,MAAchD,OAAOvD,KAAKuG,GAA1B,eAA8B,CAAzB,IAAI9B,EAAC,KACTgB,EAAEhB,GAAK8B,EAAE9B,GAEV,OAAOgB,M,8CAgBV,WAA+Be,EAAMpC,GAArC,6BAAAzD,EAAA,sDACKK,EAAM,GACNsB,EAAO,GAFZ,KAGSkE,EAHT,OAIO,sBAJP,OAYO,cAZP,uCAKSrC,EAAWC,EAAS,WAAWlC,MAAK,SAACuD,GAC1CnD,EAAOmD,KANX,OAQG,UAAclC,OAAOvD,KAAKsC,EAAKA,MAA/B,eAASmC,EAA6B,KACrCzD,EAAIC,KAAKgE,GAAU3C,EAAKiC,MAAOjC,EAAKA,KAAKmC,GAAIA,IATjD,oDAaSE,GAAYP,EAAS,WAAWlC,MAAK,SAACuD,GAC3CnD,EAAOmD,KAdX,QAgBG,UAAclC,OAAOvD,KAAKsC,EAAKA,MAA/B,eAASmC,EAA6B,KACrCzD,EAAIC,KAAKgE,GAAU3C,EAAKiC,MAAOjC,EAAKA,KAAKmC,GAAIA,IAjBjD,iGAuBQc,GAAUvE,IAvBlB,6C,+BA8CeyF,G,mFAAf,WAA6BD,EAAMpC,GAAnC,2CAAAzD,EAAA,sDAA4C+F,IAA5C,iCACK1F,EAAM,GACNsB,EAAO,GAFZ,KAGSkE,EAHT,OAIO,sBAJP,OAoBO,cApBP,wCAKSrC,EAAWC,EAAS,UAAUlC,MAAK,SAACuD,GACzCnD,EAAOmD,KANX,OAQG,UAAclC,OAAOvD,KAAKsC,EAAKA,MAA/B,eAASmC,EAA6B,MACjCiC,GAAoB,WAANjC,IACZzD,EAAIC,KACFgE,GACE3C,EAAKiC,MACLjC,EAAKA,KAAKmC,GACVA,IAdd,qDAqBSE,GAAYP,EAAS,UAAUlC,MAAK,SAACuD,GAC1CnD,EAAOmD,KAtBX,QAwBG,UAAclC,OAAOvD,KAAKsC,EAAKA,MAA/B,eAASmC,EAA6B,MACjCiC,GAAoB,WAANjC,KACjBzD,EAAIC,KACHgE,GACQ3C,EAAKiC,MACLjC,EAAKA,KAAKmC,GAAGI,KACbJ,EAAI,kBAGbzD,EAAIC,KACHgE,GACQ3C,EAAKiC,MACLjC,EAAKA,KAAKmC,GAAGK,MACbL,EAAI,sBArClB,iGA+CQc,GAAUvE,IA/ClB,6C,oEAsDA,WACCM,GADD,yCAAAX,EAAA,yDAECyD,EAFD,+BAEWd,EACVqD,EAHD,+BAGarD,EACZsD,EAJD,+BAIWtD,EACVH,EALD,+BAKW,CAAE0D,KAAMvD,EAAW9B,aAAc8B,GAEtChC,EAPN,yCAQS,MART,OAWOiD,EAAQhF,EAAMoH,EAAWC,GAXhC,KAYSxC,EAZT,cAcOd,EAdP,UAmBOA,EAnBP,UA0BSA,EA1BT,qCAemBA,EAA8BhC,EAAQqF,EAAWC,EAASzD,GAf7E,eAeOnC,EAfP,yBAgBaA,EAAIf,KAAI,gBAAG8C,EAAH,EAAGA,MAAOT,EAAV,EAAUA,KAAV,OAAqB2C,GAAUV,EAAOjC,EAAMS,OAhBjE,oBAoBUkC,GApBV,KAqBKV,EArBL,UAsBWjB,EAAuBhC,EAAQqF,EAAWC,EAASzD,GAtB9D,2FA2B4BG,EAAmBhC,EAAQqF,EAAWC,GA3BlE,eA2BUE,EA3BV,OA4BUxB,EAAW/B,OAAO6C,QAAQU,GAAW7G,KAAI,mCAAEwE,EAAF,KAAKnE,EAAL,YAC3C2E,GAAUV,EAAOjE,EAAGmE,MA7B5B,kBA+Bac,GAAUD,IA/BvB,iCAkCU,MAlCV,6C,sBChKA,IAAMyB,GAAS,CACbC,SAAS,EACTC,SAAU,SACV5B,OAAQ,CACN6B,UAAW,UACXC,SAAU,KAIRC,GAAU,SAACC,GACf,IAAIC,EAAO,CACTC,OAAQ,CACNC,MAAO,CACL,CACEC,SAAS,EACTC,MAAO,CACLC,aAAa,KAInBC,MAAO,CACL,CACEH,SAAS,KAIfI,SAAU,CACRC,KAAM,SAERC,YAAY,EACZC,qBAAqB,GAQvB,OAJIX,IACFC,EAAKC,OAAOC,MAAM,GAAGE,MAAMO,IAAM,KAG5BX,GAGHhB,GAAS,CACb,CAAE4B,gBAAiB,oBACnB,CAAEA,gBAAiB,oBACnB,CAAEA,gBAAiB,qBAGrB,SAASC,GAAaC,GACpB,IAAM9F,EAAO+D,GAAY+B,EAAM9F,KAAMgE,IAErC,OAAO,cAAC,MAAD,CAAKhE,KAAMA,EAAMyE,OAAQA,GAAQK,QAASA,GAAQgB,EAAMf,a,aC5D3DgB,G,MAEA/F,GAAO,CACX+C,OAAQgD,GAAQ9D,MAChBe,SAAU,CACR,CACEvC,MAAO,QACPT,KAAM+F,GAAQC,eAAeC,MAC7BpC,MAAM,EACN+B,gBAAiB,kBACjBM,YAAa,yBAEf,CACEzF,MAAO,4BACPT,KAAM+F,GAAQC,eAAeG,MAC7BtC,MAAM,EACN+B,gBAAiB,mBACjBM,YAAa,uBAEf,CACEzF,MAAO,qBACPT,KAAM+F,GAAQC,eAAeI,SAC7BvC,MAAM,EACN+B,gBAAiB,qBACjBM,YAAa,4BAEf,CACEzF,MAAO,gBACPT,KAAM+F,GAAQC,eAAeK,cAC7BxC,MAAM,EACN+B,gBAAiB,mBACjBM,YAAa,0BAEf,CACEzF,MAAO,oBACPT,KAAM+F,GAAQC,eAAeM,IAC7BzC,MAAM,EACN+B,gBAAiB,mBACjBM,YAAa,0BAEf,CACEzF,MAAO,UACPT,KAAM+F,GAAQC,eAAeO,QAC7B1C,MAAM,EACN+B,gBAAiB,mBACjBM,YAAa,0BAEf,CACEzF,MAAO,QACPT,KAAM+F,GAAQC,eAAeQ,MAC7B3C,MAAM,EACN+B,gBAAiB,eACjBM,YAAa,wBAKbzB,GAAS,CACbC,SAAS,EACTC,SAAU,SACV5B,OAAQ,CACN6B,UAAW,UACXC,SAAU,KAIRC,GAAU,CACdG,OAAQ,CACNC,MAAO,CACL,CACEE,MAAO,CACLC,aAAa,MAKrBE,SAAU,CACRC,KAAM,SAERC,YAAY,EACZC,qBAAqB,GAKRe,GAFG,kBAAM,cAAC,OAAD,CAAMzG,KAAMA,GAAMyE,OAAQA,GAAQK,QAASA,MC9E7DL,GAAS,CACbC,SAAS,EACTC,SAAU,SACV5B,OAAQ,CACN6B,UAAW,UACXC,SAAU,KAIRC,GAAU,CACdG,OAAQ,CACNC,MAAO,CACL,CACEE,MAAO,CACLC,aAAa,MAKrBE,SAAU,CACRC,KAAM,SAERC,YAAY,EACZC,qBAAqB,GAGjBgB,GAAU,CACd,CACExC,KAAM,OACNzD,MAAO,0BACPyF,YAAa,kBACbS,YAAa,EACb9C,MAAM,GAER,CACEK,KAAM,MACNzD,MAAO,oBACPmF,gBAAiB,yBAEnB,CACE1B,KAAM,OACNzD,MAAO,yBACPyF,YAAa,mBACbS,YAAa,EACb9C,MAAM,GAER,CACEK,KAAM,MACNzD,MAAO,mBACPmF,gBAAiB,0BAEnB,CACE1B,KAAM,OACNzD,MAAO,uBACPyF,YAAa,mBACbS,YAAa,EACb9C,MAAM,GAER,CACEK,KAAM,MACNzD,MAAO,iBACPmF,gBAAiB,2BASNgB,OALf,SAAqBd,GACnB,IAAI9F,EAAO+D,GAAY+B,EAAM9F,KAAM0G,IACnC,OAAO,cAAC,MAAD,CAAK1G,KAAMA,EAAMyE,OAAQA,GAAQK,QAASA,MCnDpC+B,OAtBf,WACE,OACE,gCACE,wEACA,+BACE,0EACA,0EACA,kEACA,4DACA,kFAEE,6BACE,mGAIN,4GACA,uHCNAC,GAA4BC,yBAAcC,eAG1CC,GAASC,GAKTC,GAASN,GA2JAO,G,kDAvJb,aAAe,IAAD,8BACZ,gBAGKC,MAAQ,CAAEC,GAAG,EAAOC,GAAG,EAAOC,GAAG,EAAMC,GAAG,EAAOC,GAAG,GAJ7C,E,gEAOO,IAAD,Q,+CAGlBC,CAAgB,oBAAqB,aAAa/H,MAAK,SAAAqE,GAErD,EAAK2D,SAAS,CAAEC,gBAAiB5D,OAChC6D,OAAM,SAAA7I,GAEP,EAAK2I,SAAS,CAAEN,GAAG,OAClBS,SAAQ,SAAA9I,GACT,EAAK2I,SAAS,CAAEN,GAAG,OAGrBnD,GAAc,oBAAqB,aAAa,GAAOvE,MAAK,SAAAqE,GAE1D,EAAK2D,SAAS,CAAEI,eAAgB/D,OAC/B6D,OAAM,SAAA7I,GAEP,EAAK2I,SAAS,CAAEL,GAAG,OAClBQ,SAAQ,SAAA9I,GACT,EAAK2I,SAAS,CAAEL,GAAG,OAGrBpD,GAAc,YAAa,aAAa,GAAMvE,MAAK,SAAAqE,GACjD,EAAK2D,SAAS,CAAEK,oBAAqBhE,OACpC6D,OAAM,SAAA7I,GAEP,EAAK2I,SAAS,CAAEH,GAAG,OAClBM,SAAQ,SAAA9I,GACT,EAAK2I,SAAS,CAAEH,GAAG,O,4CAGrBS,CAAWlH,EAAMhE,WAAYgE,EAAM3E,UAAUuD,MAAK,SAAAqE,GAChD,EAAK2D,SAAS,CAACO,kBAAmBlE,OACjC6D,OAAM,SAAA7I,GAEP,EAAK2I,SAAS,CAAEF,GAAG,OAClBK,SAAQ,SAAA9I,GACT,EAAK2I,SAAS,CAAEF,GAAG,S,+BAMb,IAAD,OAEDU,EAAY,CAChB,CACEC,GAAI,EACJC,KAAM,qCACNC,MAAO,WACL,OAAI,EAAKlB,MAAM,GACL,cAACxB,GAAD,CAAc7F,KAAM,EAAKqH,MAAMQ,gBAAiB9C,WAAW,IACrD,OAGpB,CACEsD,GAAI,EACJC,KAAM,qCACNC,MAAO,WACL,OAAI,EAAKlB,MAAM,GACL,cAACxB,GAAD,CAAc7F,KAAM,EAAKqH,MAAMW,iBACzB,OAGpB,CACEK,GAAI,EACJC,KAAM,2BACNC,MAAOtB,IAET,CACEoB,GAAI,EACJC,KAAM,qBACNC,MAAO,WACL,OAAI,EAAKlB,MAAM,GACL,cAAC,GAAD,CAAarH,KAAM,EAAKqH,MAAMY,sBACxB,OAGpB,CACEI,GAAI,EACJC,KAAM,0CACNC,MAAO,WACL,OAAI,EAAKlB,MAAM,GACL,cAACxB,GAAD,CAAc7F,KAAM,EAAKqH,MAAMc,kBAAmBpD,WAAW,IACvD,OAGpB,CACEsD,GAAI,EACJC,KAAM,iBACNC,MAAOpB,KAcX,OACE,qBAAKjL,MAAM,OAAX,SACE,cAAC4K,GAAD,CAEE0B,QAAS,CAAEC,GAbF,CACb,CAAE7K,EAAG,IAAKE,EAAG,EAAG4K,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEhL,EAAG,IAAKE,EAAG,EAAG4K,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEhL,EAAG,IAAKE,EAAG,EAAG4K,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEhL,EAAG,IAAKE,EAAG,EAAG4K,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEhL,EAAG,IAAKE,EAAG,EAAG4K,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEhL,EAAG,IAAKE,EAAG,EAAG4K,EAAG,EAAGC,EAAG,EAAGC,EAAG,KAS3BC,oBAAoB,EACpBC,UAAU,SACVC,UAAU,EACVC,UAAWC,KAAKnD,MAAMkD,UACtBE,YAAY,EACZC,aAAa,EACbC,OAAQH,KAAKI,WACbC,WAAYL,KAAKM,WACjBC,aAAcP,KAAKQ,aACnBC,OAAQ,CAAC,GAAI,IAbf,SAeGtB,EAAUzK,KAAI,SAACgM,EAAM/L,GACpB,OACE,sBAAmBkL,UAAU,YAA7B,UACE,6BAAKa,EAAKrB,OACV,qBACEsB,MAAO,CACLC,MAAO,MACPC,OAAQ,MACRJ,OAAQ,UAJZ,SAOE,cAACC,EAAKpB,MAAN,QATMoB,EAAKtB,e,GArIV0B,IAAMC,WCrBzBC,IAASC,OACP,gCACE,cAAC,EAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.46a4edae.chunk.js","sourcesContent":["/*\r\n  Renders the banner to the screen.\r\n\r\n  Called in index.js.\r\n*/\r\n\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div class=\"banner\">\r\n      <div class=\"title\">\r\n        <h1>Diversity in CS at PSU</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// IPEDS fields\r\nexport const FALL_RETENTION = \"fall-retention\";\r\nexport const FALL_ENROLLMENT = \"fall-enrollment\";\r\nexport const GRAD_6YR = \"grad-rates\";\r\n\r\nexport const GRAD_6YR_COUNT = \"completers_150pct\";\r\n\r\n// special values\r\nexport const ALL = 99;\r\nexport const MISSING = -1;\r\nexport const NA = -2;\r\nexport const SUPPRESSED = -3;\r\n\r\nexport const MALE = 1;\r\nexport const FEMALE = 2;\r\nexport const UNKNOWN = 9;\r\n\r\n// latest year for retention data\r\nexport const EARLIEST = 2009; // not actually the earliest, but need later years for code 99 to work\r\nexport const LATEST = 2018;\r\n\r\n// unitIDs\r\nexport const PDX_UNITID = 209807;\r\n// TODO: more unitids\r\n//\r\n// MIT\r\n// Carnegie Mellon \r\n// Stanford\r\n// Univ of CA Berkeley\r\n// California Institute Technology\r\n","export { mergeArrays, range, resultOrZero, unzip, zip };\r\n\r\n// sorted merge, keeping exactly one copy of each unique element\r\nfunction mergeArrays(a, b) {\r\n\tlet i = 0;\r\n\tlet res = [];\r\n\tres = res.concat(a).sort();\r\n\tfor (let n of b) {\r\n\t\ti = res.findIndex((e) => n <= e);\r\n\t\tif (i === -1) {\r\n\t\t\t// n is the max, so push it to the back\r\n\t\t\tres.push(n);\r\n\t\t} else if (n !== res[i]) {\r\n\t\t\t// insert in sorted order\r\n\t\t\tres.splice(i, 0, n);\r\n\t\t}\r\n\t\t// else if n is already in the array do nothing\r\n\t}\r\n\treturn res;\r\n}\r\n\r\n// Range from start (inclusive) to end (exclusive)\r\nfunction range(start, end, interval = 1) {\r\n\tconst diff = end - start;\r\n\tconst len = Math.floor(diff / interval + !!(diff % interval));\r\n\treturn [...Array(len).keys()].map((i) => interval * i + start);\r\n}\r\n\r\n// return a zero value if passed undefined or null or other false-y stuff;\r\n// otherwise call the provided function on the passed value\r\nfunction resultOrZero(x, f = (v) => v, zero=0) {\r\n\tif (!x) {\r\n\t\treturn zero;\r\n\t}\r\n\r\n\treturn f(x);\r\n}\r\n\r\nfunction unzip(arr) {\r\n\tconst inner_len = Math.min(...arr.map((a) => a.length));\r\n\r\n\treturn range(0, inner_len).map((i) => arr.map((a) => a[i]));\r\n}\r\n\r\n// zip :: [A] -> [B] -> [[A, B]]\r\n// (should work with any number of arguments)\r\nfunction zip(a, b) {\r\n\tif (arguments.length < 1) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tconst len = Math.min(a.length, b.length);\r\n\r\n\tlet res = [];\r\n\tfor (let i = 0; i < len; i++) {\r\n\t\tres.push(Array.from(arguments).map(arr => arr[i]));\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n","/*\r\nFunctions to make requests to and extract data from\r\nhttps://educationdata.urban.org/api/v1/college-university/ipeds\r\n\r\nNotes:\r\n- Institutions are identified by `unitid` in the dataset\r\n- Some queries will return multiple results for a single unitid, each\r\nrepresenting a different subset of that unitid's population such as\r\nfull-time/part-time/total.\r\n*/\r\n\r\nimport { ipeds } from \"./apiData.js\";\r\nimport * as _ from \"./ipeds_consts.js\";\r\nimport { resultOrZero, unzip } from \"./utils.js\";\r\n\r\nexport { getFallRetention, getFallEnrollmentByRace, getGradRates };\r\nexport * from \"./ipeds_consts.js\";\r\n\r\nconst BASE = \"https://educationdata.urban.org/\";\r\nconst API = \"api/v1/college-university/ipeds/\";\r\n\r\n// should return an array of { label: int_code, data: [ints] } where the int_code is an\r\n// integer code corresponding to a race listed in the IPEDS data\r\nasync function getFallEnrollmentByRace(\r\n\tunitid,\r\n\tstart = _.EARLIEST,\r\n\tend = _.LATEST,\r\n\tlevelOfStudy = _.ALL\r\n) {\r\n\tif (!unitid) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst api = API + _.FALL_ENROLLMENT;\r\n\tconst endpt = \"race/sex/\";\r\n\r\n\tlet params = new URLSearchParams();\r\n\tparams.append(\"unitid\", unitid);\r\n\tparams.append(\"sex\", 99);\r\n\r\n\tlet res = [];\r\n\tfor (let year = start; year <= end; year++) {\r\n\t\tlet url = new URL(\r\n\t\t\t`${api}/${year}/${levelOfStudy}/${endpt}?${params}`,\r\n\t\t\tBASE\r\n\t\t);\r\n\r\n\t\tlet r = await fetch(url)\r\n\t\t\t.then((e) => {\r\n\t\t\t\t// handle HTTP response code\r\n\t\t\t\tif (e.ok) {\r\n\t\t\t\t\treturn e.json();\r\n\t\t\t\t}\r\n\t\t\t\t// TODO: handle errors\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\t// TODO: make this more robust in case of missing data\r\n\r\n\t\t\t\t// NOTE: this will be a list of enrollment values\r\n\t\t\t\tlet temp = data.filter(\r\n\t\t\t\t\t(itm) => Number.parseInt(itm[\"sex\"]) === 99\r\n\t\t\t\t);\r\n\t\t\t\ttemp = temp.map((itm) => [\r\n\t\t\t\t\tNumber.parseInt(itm[\"race\"]),\r\n\t\t\t\t\tNumber.parseInt(itm[\"enrollment_fall\"]),\r\n\t\t\t\t]);\r\n\t\t\t\treturn Array(temp).sort();\r\n\t\t\t});\r\n\r\n\t\tres.push(r);\r\n\t}\r\n\r\n\treturn unzip(res)\r\n\t\t.map(unzip)\r\n\t\t.map((p) => {\r\n\t\t\treturn { label: p[0][0], data: p[1] };\r\n\t\t});\r\n}\r\n\r\n// get overall undergrad fall retention rates for years from start to end, inclusive\r\nasync function getFallRetention(unitid, start = _.EARLIEST, end = _.LATEST) {\r\n\tif (!unitid) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst api = API + \"fall-retention\";\r\n\r\n\t// supported in all browsers that matter, i.e. not IE\r\n\tlet params = new URLSearchParams();\r\n\tparams.append(\"unitid\", unitid);\r\n\t// code for total student body data\r\n\tparams.append(\"ftpt\", 99);\r\n\r\n\tlet res = [];\r\n\tfor (let year = start; year <= end; year++) {\r\n\t\tlet url = new URL(`${api}/${year}/?${params}`, BASE);\r\n\r\n\t\tlet r = await fetch(url).then((e) => {\r\n\t\t\t\t// handle HTTP response code\r\n\t\t\t\tif (e.ok) {\r\n\t\t\t\t\treturn e.json();\r\n\t\t\t\t}\r\n\t\t\t\t// TODO: handle errors\r\n\t\t\t}).then((data) => {\r\n\t\t\t\t// TODO: make this more robust in case of missing data\r\n\t\t\t\treturn data.results[0][\"retention_rate\"];\r\n\t\t\t});\r\n\r\n\t\t// TODO: package data in a better way\r\n\t\tif (r) {\r\n\t\t\tres.push(r);\r\n\t\t}\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\n\r\n// get 6-year graduating classes broken down by legal sex\r\n// TODO: support breakdowns by other categories\r\nasync function getGradRates(unitid,  start = _.EARLIEST, end = _.LATEST, filters={ race: _.ALL, subcohort: _.ALL }) {\r\n\tif (!unitid) {\r\n\t\treturn null;\r\n    }\r\n\r\n\tconst api = API + ipeds.GRAD_6YR;\r\n\r\n\t// supported in all browsers that matter, i.e. not IE\r\n\tlet params = new URLSearchParams();\r\n    params.append(\"unitid\", unitid);\r\n    \r\n    // append all filters to search params\r\n    for (let f of Object.keys(filters)) {\r\n        params.append(f, filters[f]);\r\n    }\r\n\r\n    let res = {\r\n        female: [],\r\n        male: [],\r\n        unknown: []\r\n    };\r\n\r\n\tfor (let year = start; year <= end; year++) {\r\n\t\tconst url = new URL(`${api}/${year}/?${params}`, BASE);\r\n\r\n\t\tawait fetch(url).then((e) => {\r\n\t\t\t\t// handle HTTP response code\r\n\t\t\t\tif (e.ok) {\r\n\t\t\t\t\treturn e.json();\r\n\t\t\t\t}\r\n\t\t\t\t// TODO: handle errors\r\n\t\t\t}).then((data) => {\r\n\t\t\t\t// TODO: make this more robust in case of missing data\r\n\t\t\t\treturn data.results;\r\n            }).then(r => {\r\n                const total = resultOrZero(r.find(e => e[\"sex\"] === _.ALL), v => v[_.GRAD_6YR_COUNT], 0);\r\n                const male = resultOrZero(r.find(e => e[\"sex\"] === _.MALE), v => v[_.GRAD_6YR_COUNT], 0);\r\n                const female = resultOrZero(r.find(e => e[\"sex\"] === _.FEMALE), v => v[_.GRAD_6YR_COUNT], 0);\r\n                const unknown = resultOrZero(r.find(e => e[\"sex\"] === _.UNKNOWN), v => v[_.GRAD_6YR_COUNT], 0);\r\n\r\n                res.male.push(((male / total) * 100).toFixed(2));\r\n                res.female.push(((female / total) * 100).toFixed(2));\r\n                res.unknown.push(((unknown / total) * 100).toFixed(2));\r\n            });\r\n\t}\r\n\r\n    return res;\r\n}","// functions to fetch data from our dataset, stored as JSON\r\n//\r\n// These can be imported directly for use, but it's best to\r\n// use the wrappers provided in `apiData.js`.\r\n\r\nimport { zip } from \"./utils.js\";\r\n\r\nexport { gradDemoBy, retentionBy };\r\n\r\nexport const LEGAL_SEX = \"legal-sex\";\r\nexport const RACE = \"race-ethnicity\";\r\nexport const GENDER = \"gender\";\r\nexport const ORIENTATION = \"sexual-orientation\";\r\nexport const URM = \"urm\";\r\n\r\nconst baseUrl = process.env.PUBLIC_URL + \"/data/\";\r\nconst gradDemo = baseUrl + \"grad_demographics.json\";\r\nconst retention = baseUrl + \"retention.json\";\r\n\r\nasync function fetchJson(url) {\r\n\treturn fetch(url).then((r) => r.json());\r\n}\r\n\r\n// return CS graduate demographic data partitioned on a feature such as\r\n// race or gender for all years data is available for\r\n//\r\n// valid features are:\r\n//   LEGAL_SEX\r\n//   RACE           (race and ethnicity)\r\n//   GENDER\r\n//   ORIENTATION    (sexual orientation)\r\n//\r\n// as:\r\n//   percent (of total CS graduates)\r\n//   totals\r\n//\r\n// for percents, returned object has the form:\r\n//   {\r\n//     years: [Number],\r\n//     data: {\r\n//       <field>: [Number],\r\n//       ...\r\n//     }\r\n//   }\r\n//\r\n// totals are only returned with the data if not in \"percent\" mode\r\nasync function gradDemoBy(feature, as = \"percent\") {\r\n\tlet gradDemoData = await fetchJson(gradDemo);\r\n\tconst years = gradDemoData.years;\r\n\tconst totals = gradDemoData[\"total-graduates\"];\r\n\r\n\tlet results = {\r\n\t\tyears: years,\r\n\t\tdata: {},\r\n\t};\r\n\tif (as !== \"percent\") {\r\n\t\tresults.data.totals = totals;\r\n\t}\r\n\tfor (let k of Object.keys(gradDemoData[feature])) {\r\n\t\tif (as === \"percent\") {\r\n\t\t\tresults.data[k] = zip(\r\n\t\t\t\ttotals,\r\n\t\t\t\tgradDemoData[feature][k]\r\n\t\t\t).map((pair) => ((pair[1] / pair[0]) * 100).toFixed(2));\r\n\t\t} else {\r\n\t\t\tresults.data[k] = gradDemoData[feature][k];\r\n\t\t}\r\n\t}\r\n\r\n\treturn results;\r\n}\r\n\r\n// return retention per cohort (defined by start year) partitioned\r\n// on a feature for which data are available\r\n//\r\n// valid features are:\r\n//   LEGAL_SEX\r\n//   URM        (true/false: member of an under-represented minority)\r\n//\r\n// as:\r\n//   percent\r\n//   totals\r\n//\r\n// for counts, returned object has the form:\r\n//   {\r\n//     years: [Number],\r\n//     data: {\r\n//       <field>: {\r\n//         init: [Number],\r\n//         final: [Number]\r\n//       },\r\n//       ...\r\n//     }\r\n//   }\r\n// for percentages, data fields are similar in structure to those\r\n// documented for `gradDemoBy`\r\nasync function retentionBy(feature, as = \"percent\") {\r\n\tconst retentionData = await fetchJson(retention);\r\n\tconst years = retentionData.years;\r\n\tlet totals = {\r\n\t\tinit: retentionData[\"cohort-start-size\"].total, //.map(Number.parseInt),\r\n\t\tfinal: retentionData[\"grad-or-persisted-cs\"].total, //.map(Number.parseInt),\r\n\t};\r\n\tif (as === \"percent\") {\r\n\t\ttotals = zip(totals.init, totals.final).map((pair) =>\r\n\t\t\t((pair[1] / pair[0]) * 100).toFixed(2)\r\n\t\t);\r\n\t}\r\n\r\n\tconst ft_init = retentionData[\"cohort-start-size\"][feature];\r\n\tconst ft_final = retentionData[\"grad-or-persisted-cs\"][feature];\r\n\r\n\t// filter raw data into an object, keyed by the chosen\r\n\t// feature then by initial and final\r\n\tlet results = {\r\n\t\tyears: years,\r\n\t\tdata: {\r\n\t\t\ttotals: totals,\r\n\t\t},\r\n\t};\r\n\tfor (let k of Object.keys(ft_init)) {\r\n\t\tresults.data[k] = {\r\n\t\t\tinit: ft_init[k], //.map(Number.parseInt),\r\n\t\t\tfinal: ft_final[k], //.map(Number.parseInt)\r\n\t\t};\r\n\r\n\t\tif (as === \"percent\") {\r\n\t\t\tresults.data[k] = zip(\r\n\t\t\t\tresults.data[k].init,\r\n\t\t\t\tresults.data[k].final\r\n\t\t\t).map((pair) => ((pair[1] / pair[0]) * 100).toFixed(2));\r\n\t\t}\r\n\t}\r\n\r\n\treturn results;\r\n}\r\n","// Wrappers around API calls, intended to return data in structures\r\n// that work nicely with react-charts and similar libraries.\r\n\r\nimport * as ipeds from \"./ipeds.js\";\r\nimport { mergeArrays, range, zip } from \"./utils.js\";\r\nimport { gradDemoBy, retentionBy } from \"./pdx_data.js\";\r\n\r\nexport {\r\n\tapplyColors,\r\n\tchartData,\r\n\tmergeData,\r\n\tpdxDataCounts,\r\n\tpdxDataPercents,\r\n\tqueryIpeds,\r\n};\r\nexport * as ipeds from \"./ipeds_consts.js\";\r\n\r\n// convert arrays of x-values and y-values into an object\r\n// that is directly usable as the data prop of a line chart\r\nfunction chartData(xArray, yArray, series = \"\") {\r\n\treturn {\r\n\t\tlabels: xArray,\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: series,\r\n\t\t\t\tdata: yArray,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n}\r\n\r\n// in-order merge of datasets with possibly-overlapping, sortable\r\n// x-values\r\nfunction mergeData(datasets) {\r\n\tconst res_labels = datasets\r\n\t\t.map((d) => d.labels)\r\n\t\t.reduce((a, e) => mergeArrays(a, e));\r\n\r\n\tlet res_datasets = [];\r\n\tfor (let ds of datasets) {\r\n\t\tlet y_temp = new Array(res_labels.length).fill(0);\r\n\t\tfor (let d of ds.datasets) {\r\n\t\t\tfor (let [i, v] of ds.labels.entries()) {\r\n\t\t\t\ty_temp[res_labels.findIndex((x) => x === v)] = d.data[i];\r\n\t\t\t}\r\n\t\t\tres_datasets.push({ label: d.label, data: y_temp });\r\n\t\t}\r\n\t}\r\n\r\n\treturn { labels: res_labels, datasets: res_datasets };\r\n}\r\n\r\n// apply color styles to datasets, for use with react-chartjs-2\r\n//\r\n// arguments:\r\n//   data :: { labels: [...], datasets: [{ label: String, data: [...] }, ...] }\r\n//   colors :: [{fill?: Boolean, backgroundColor?: rgbString, ...}, ...]\r\n// The colors array must be longer than data.datasets or some data will be omitted.\r\nfunction applyColors(data, colors) {\r\n\treturn {\r\n\t\tlabels: data.labels,\r\n\t\tdatasets: zip(data.datasets, colors).map(([d, c]) => {\r\n\t\t\tfor (let k of Object.keys(c)) {\r\n\t\t\t\td[k] = c[k];\r\n\t\t\t}\r\n\t\t\treturn d;\r\n\t\t}),\r\n\t};\r\n}\r\n\r\n// get CS graduate demographic data or CS retention data\r\n// from our JSON data sets as percentages\r\n//\r\n//\r\n// Return values should have the form:\r\n//   [\r\n//     {\r\n//       data: [(Year, Number)],\r\n//       label: <field name>\r\n//     }\r\n//   ]\r\nasync function pdxDataPercents(type, feature) {\r\n\tlet res = [];\r\n\tlet data = {};\r\n\tswitch (type) {\r\n\t\tcase \"grad-demographics\":\r\n\t\t\tawait gradDemoBy(feature, \"percent\").then((d) => {\r\n\t\t\t\tdata = d;\r\n\t\t\t});\r\n\t\t\tfor (let k of Object.keys(data.data)) {\r\n\t\t\t\tres.push(chartData(data.years, data.data[k], k));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"retention\":\r\n\t\t\tawait retentionBy(feature, \"percent\").then((d) => {\r\n\t\t\t\tdata = d;\r\n\t\t\t});\r\n\t\t\tfor (let k of Object.keys(data.data)) {\r\n\t\t\t\tres.push(chartData(data.years, data.data[k], k));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\treturn mergeData(res);\r\n}\r\n\r\n// get CS graduate demographic data or CS retention data\r\n// from our JSON data sets as counts\r\n//\r\n// Grad demographics return values should be similar to those documented\r\n// for `pdxDataPercentages`\r\n//\r\n// Retention data should be returned in an array with the form:\r\n//   [\r\n//     {\r\n//       data: [(year, Number)],\r\n//       label: \"initial <field name>\"\r\n//     },\r\n//     {\r\n//       data: [(year, Number)],\r\n//       label: \"final <field name>\"\r\n//     },\r\n//     ...\r\n//   ]\r\n// That is, the structure will be the same, but both initial and final values\r\n// will be present in their own series.\r\nasync function pdxDataCounts(type, feature, keepTotals = true) {\r\n\tlet res = [];\r\n\tlet data = {};\r\n\tswitch (type) {\r\n\t\tcase \"grad-demographics\":\r\n\t\t\tawait gradDemoBy(feature, \"counts\").then((d) => {\r\n\t\t\t\tdata = d;\r\n\t\t\t});\r\n\t\t\tfor (let k of Object.keys(data.data)) {\r\n\t\t\t\tif (keepTotals || k !== \"totals\") {\r\n          res.push(\r\n            chartData(\r\n              data.years,\r\n              data.data[k],\r\n              k\r\n            )\r\n          );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"retention\":\r\n\t\t\tawait retentionBy(feature, \"counts\").then((d) => {\r\n\t\t\t\tdata = d;\r\n\t\t\t});\r\n\t\t\tfor (let k of Object.keys(data.data)) {\r\n\t\t\t\tif (keepTotals || k !== \"totals\") {\r\n\t\t\t\t\tres.push(\r\n\t\t\t\t\t\tchartData(\r\n              data.years,\r\n              data.data[k].init,\r\n              k + \" start cohort\"\r\n            )\r\n\t\t\t\t\t);\r\n\t\t\t\t\tres.push(\r\n\t\t\t\t\t\tchartData(\r\n              data.years,\r\n              data.data[k].final,\r\n              k + \" persisted in CS\"\r\n            )\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn mergeData(res);\r\n}\r\n\r\n// Get time series of various attributes available from the IPEDS dataset\r\n// returns an object suitable for use with react-chartjs-2\r\n//\r\n// so far, only seriously tested with GRAD_6YR\r\nasync function queryIpeds(\r\n\tunitid,\r\n\tfeature = ipeds.FALL_RETENTION,\r\n\tstartYear = ipeds.EARLIEST,\r\n\tendYear = ipeds.LATEST,\r\n\tfilters = { ftpt: ipeds.ALL, levelOfStudy: ipeds.ALL }\r\n) {\r\n\tif (!unitid) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst years = range(startYear, endYear);\r\n\tswitch (feature) {\r\n    // fall enrollment data\r\n\t\tcase ipeds.FALL_ENROLLMENT:\r\n\t\t\tlet res = await ipeds.getFallEnrollmentByRace(unitid, startYear, endYear, filters);\r\n      return res.map(({ label, data }) => chartData(years, data, label));\r\n\r\n    // retention based on returns in fall\r\n\t\tcase ipeds.FALL_RETENTION:\r\n\t\t\treturn chartData(\r\n\t\t\t\t\tyears,\r\n\t\t\t\t\tawait ipeds.getFallRetention(unitid, startYear, endYear, filters)\r\n        );\r\n\r\n    // graduates within 6 years\r\n    case ipeds.GRAD_6YR:\r\n      let gradRates = await ipeds.getGradRates(unitid, startYear, endYear);\r\n      let datasets = Object.entries(gradRates).map(([k, v]) => \r\n        chartData(years, v, k)\r\n      );\r\n      return mergeData(datasets);\r\n\r\n\t\tdefault:\r\n\t\t\treturn null;\r\n\t}\r\n}\r\n","/*\r\n\tCreate a chart of graduation class \r\n\tmakeup by Legal Sex.  \r\n\r\n\tUses props passing data from the apiData.js\r\n\tfile when the component is called in the\r\n\tGrid.js file.\r\n\r\n\tThis graph renders either a percentage \r\n\tmakeup chart or a chart of counts based\r\n\ton how it is called.  It is called twice\r\n\tin Grid.js in order to render both views\r\n\tof the data. \r\n*/\r\n\r\nimport React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { applyColors } from \"./apis/apiData\";\r\n\r\nexport { GradLegalSex };\r\n\r\nconst legend = {\r\n  display: true,\r\n  position: \"bottom\",\r\n  labels: {\r\n    fontColor: \"#323130\",\r\n    fontSize: 12,\r\n  },\r\n};\r\n\r\nconst options = (isPercent) => {\r\n  let opts = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          stacked: true,\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          stacked: true,\r\n        },\r\n      ],\r\n    },\r\n    tooltips: {\r\n      mode: \"label\",\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n  };\r\n\r\n  //set max height to 100 if chart is in percentage\r\n  if (isPercent) {\r\n    opts.scales.yAxes[0].ticks.max = 100;\r\n  }\r\n\r\n  return opts;\r\n};\r\n\r\nconst colors = [\r\n  { backgroundColor: \"rgb(252, 70, 26)\" },\r\n  { backgroundColor: \"rgb(249, 153, 0)\" },\r\n  { backgroundColor: \"rgb(192,192,192)\" },\r\n];\r\n\r\nfunction GradLegalSex(props) {\r\n  const data = applyColors(props.data, colors);\r\n\r\n  return <Bar data={data} legend={legend} options={options(props.isPercent)} />;\r\n}\r\n","/* \r\n  This file renders a line chart that \r\n  breaks out graduation classes by Race.\r\n\r\n  It is called as a component in Grid.js.\r\n\r\n  */\r\nimport React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport chartdata from \"./data/grad_demographics.json\";\r\n\r\nconst newdata = chartdata;\r\n\r\nconst data = {\r\n  labels: newdata.years,\r\n  datasets: [\r\n    {\r\n      label: \"Asian\",\r\n      data: newdata.race_ethnicity.Asian,\r\n      fill: false,\r\n      backgroundColor: \"rgb(37, 45, 72)\",\r\n      borderColor: \"rgba(37, 45, 72, 0.5)\",\r\n    },\r\n    {\r\n      label: \"Black or African American\",\r\n      data: newdata.race_ethnicity.Black,\r\n      fill: false,\r\n      backgroundColor: \"rgb(249, 153, 0)\",\r\n      borderColor: \"rgba(249, 153, 0.5)\",\r\n    },\r\n    {\r\n      label: \"Hispanic or Latino\",\r\n      data: newdata.race_ethnicity.Hispanic,\r\n      fill: false,\r\n      backgroundColor: \"rgb(242, 119, 117)\",\r\n      borderColor: \"rgba(242, 119, 117, 0.5)\",\r\n    },\r\n    {\r\n      label: \"International\",\r\n      data: newdata.race_ethnicity.International,\r\n      fill: false,\r\n      backgroundColor: \"rgb(0, 109, 140)\",\r\n      borderColor: \"rgba(0, 109, 140, 0.5)\",\r\n    },\r\n    {\r\n      label: \"Two or More Races\",\r\n      data: newdata.race_ethnicity.Two,\r\n      fill: false,\r\n      backgroundColor: \"rgb(252, 70, 26)\",\r\n      borderColor: \"rgba(252, 70, 26, 0.5)\",\r\n    },\r\n    {\r\n      label: \"Unknown\",\r\n      data: newdata.race_ethnicity.Unknown,\r\n      fill: false,\r\n      backgroundColor: \"rgb(192,192,192)\",\r\n      borderColor: \"rgba(192,192,192, 0.5)\",\r\n    },\r\n    {\r\n      label: \"White\",\r\n      data: newdata.race_ethnicity.White,\r\n      fill: false,\r\n      backgroundColor: \"rgb(0, 0, 0)\",\r\n      borderColor: \"rgba(0, 0, 0, 0.5)\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst legend = {\r\n  display: true,\r\n  position: \"bottom\",\r\n  labels: {\r\n    fontColor: \"#323130\",\r\n    fontSize: 14,\r\n  },\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  tooltips: {\r\n    mode: \"label\",\r\n  },\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n};\r\n\r\nconst LineChart = () => <Line data={data} legend={legend} options={options} />;\r\n\r\nexport default LineChart;\r\n","/* \r\n  Creates a multi-type chart that \r\n  renders both a line chart of starting \r\n  cohort size over the past twenty years\r\n  broken out by gender and overall cohort\r\n  and a bar graph of persistence for the \r\n  same break-outs.\r\n  \r\n  Uses props passed from the apiData.js \r\n  file when called in Grid.js\r\n  */\r\n\r\nimport React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { applyColors } from \"./apis/apiData\";\r\n\r\nconst legend = {\r\n  display: true,\r\n  position: \"bottom\",\r\n  labels: {\r\n    fontColor: \"#323130\",\r\n    fontSize: 14,\r\n  },\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    yAxes: [\r\n      {\r\n        ticks: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  tooltips: {\r\n    mode: \"label\",\r\n  },\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n};\r\n\r\nconst styling = [\r\n  {\r\n    type: \"line\",\r\n    label: \"Overall Starting Cohort\",\r\n    borderColor: \"rgb(37, 45, 72)\",\r\n    borderWidth: 2,\r\n    fill: false,\r\n  },\r\n  {\r\n    type: \"bar\",\r\n    label: \"Overall Persisted\",\r\n    backgroundColor: \"rgba(37, 45, 72, 0.8)\",\r\n  },\r\n  {\r\n    type: \"line\",\r\n    label: \"Female Starting Cohort\",\r\n    borderColor: \"rgb(252, 70, 26)\",\r\n    borderWidth: 2,\r\n    fill: false,\r\n  },\r\n  {\r\n    type: \"bar\",\r\n    label: \"Female Persisted\",\r\n    backgroundColor: \"rgba(252, 70, 26, 0.8)\",\r\n  },\r\n  {\r\n    type: \"line\",\r\n    label: \"Male Starting Cohort\",\r\n    borderColor: \"rgb(249, 153, 0)\",\r\n    borderWidth: 2,\r\n    fill: false,\r\n  },\r\n  {\r\n    type: \"bar\",\r\n    label: \"Male Persisted\",\r\n    backgroundColor: \"rgba(249, 153, 0, 0.8)\",\r\n  },\r\n];\r\n\r\nfunction Persistence(props) {\r\n  let data = applyColors(props.data, styling);\r\n  return <Bar data={data} legend={legend} options={options} />;\r\n}\r\n\r\nexport default Persistence;\r\n","/*\r\n  Renders information about the data\r\n  and API calls. \r\n\r\n  Called in Grid.js.\r\n*/\r\n\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <p>Data is specific to PSU Undergraduates.</p>\r\n      <ul>\r\n        <li>PSU CS Grad Class by Legal Sex % -- OIRP</li>\r\n        <li>PSU CS Grad Class by Legal Sex # -- OIRP</li>\r\n        <li>PSU CS Grad by Ethnicity -- OIRP</li>\r\n        <li>PSU CS Persistence -- OIRP</li>\r\n        <li>\r\n          PSU Ungergrads Graduated within 6 Years -- IPEDS\r\n          <ul>\r\n            <li>Legal Sex as a % of students who graduated within 6 years</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <p>*OIRP is data provided by PSU Office of Institutional Research and Planning</p>\r\n      <p>*IPEDS is data pulled from the Integrated Post-Secondary Education Data System API</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","/*\r\n  Creates and loads the responsive \r\n  grid component which structures the \r\n  main page.  \r\n\r\n  Utilizes data from apiData.js to\r\n  pass to each chart component as props.\r\n\r\n  Renders each chart to a grid component. \r\n  */\r\n\r\nimport React from \"react\";\r\nimport \"./Grid.css\";\r\nimport { GradLegalSex } from \"./GradLegalSex.js\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\nimport { ipeds, pdxDataCounts, pdxDataPercents, queryIpeds } from \"./apis/apiData\";\r\nimport RaceGrad from \"./RaceGrad.js\";\r\nimport Persistence from \"./Persistence.js\";\r\nimport About from \"./About.js\";\r\n//https://www.npmjs.com/package/react-grid-layout#installation\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\n//placeholder for third chart\r\nconst chart3 = RaceGrad;\r\n\r\n//placeholder for fourth chart\r\n// const chart4 = Persistence;\r\n\r\nconst chart6 = About;\r\n\r\nclass Grid extends React.Component {\r\n  // needed to initialize state\r\n  constructor() {\r\n    super();\r\n    // set index of each dataset to false\r\n    // TODO: use meaningful property names?\r\n    this.state = { 1: false, 2: false, 3: true, 4: false, 5: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // set up the component by fetching data, and set appropriate state when the fetch succeeds\r\n\r\n    pdxDataPercents(\"grad-demographics\", \"legal-sex\").then(c => {\r\n      // data loaded, store in state object\r\n      this.setState({ legalSexPercent: c })\r\n    }).catch(_ => {\r\n      // failed load, ensure loaded=false for this dataset\r\n      this.setState({ 1: false })\r\n    }).finally(_ => {\r\n      this.setState({ 1: true })\r\n    });\r\n\r\n    pdxDataCounts(\"grad-demographics\", \"legal-sex\", false).then(c => {\r\n      // data loaded, store in state object\r\n      this.setState({ legalSexCounts: c })\r\n    }).catch(_ => {\r\n      // failed load, ensure loaded=false for this dataset\r\n      this.setState({ 2: false})\r\n    }).finally(_ => {\r\n      this.setState({ 2: true })\r\n    });\r\n\r\n    pdxDataCounts(\"retention\", \"legal-sex\", true).then(c => {\r\n      this.setState({ legalSexPersistence: c })\r\n    }).catch(_ => {\r\n      // failed load, ensure loaded=false for this dataset\r\n      this.setState({ 4: false})\r\n    }).finally(_ => {\r\n      this.setState({ 4: true });\r\n    });\r\n\r\n    queryIpeds(ipeds.PDX_UNITID, ipeds.GRAD_6YR).then(c => {\r\n      this.setState({ipedsGradLegalSex: c})\r\n    }).catch(_ => {\r\n      // failed load, ensure loaded=false for this dataset\r\n      this.setState({ 5: false})\r\n    }).finally(_ => {\r\n      this.setState({ 5: true });\r\n    });\r\n\r\n    // TODO: load other datasets\r\n  }\r\n\r\n  render() {\r\n    // conditionally avoid rendering unloaded data\r\n    const gridItems = [\r\n      {\r\n        id: 1,\r\n        name: \"PSU CS Grad Class by Legal Sex (%)\",\r\n        chart: () => {\r\n          if (this.state[1]) {\r\n            return (<GradLegalSex data={this.state.legalSexPercent} isPercent={true} />);\r\n          } else { return null; }\r\n        }\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"PSU CS Grad Class by Legal Sex (#)\",\r\n        chart: () => {\r\n          if (this.state[2]) {\r\n            return (<GradLegalSex data={this.state.legalSexCounts} />);\r\n          } else { return null; }\r\n        }\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"PSU CS Grad by Ethnicity\",\r\n        chart: chart3,\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"PSU CS Persistence\",\r\n        chart: () => {\r\n          if (this.state[4]) {\r\n            return (<Persistence data={this.state.legalSexPersistence} />);\r\n          } else { return null; }\r\n        }\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"PSU Ungergrads Graduated within 6 Years\",\r\n        chart: () => {\r\n          if (this.state[5]) {\r\n            return (<GradLegalSex data={this.state.ipedsGradLegalSex} isPercent={true} />);\r\n          } else { return null; }\r\n        }\r\n      },\r\n      {\r\n        id: 6,\r\n        name: \"About the Data\",\r\n        chart: chart6,   \r\n        }\r\n      \r\n    ];\r\n\r\n    const layout = [\r\n      { i: \"1\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"2\", x: 5, y: 0, w: 5, h: 3 },\r\n      { i: \"3\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"4\", x: 5, y: 0, w: 5, h: 3 },\r\n      { i: \"5\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"6\", x: 5, y: 0, w: 5, h: 3 },\r\n    ];\r\n\r\n    return (\r\n      <div class=\"grid\">\r\n        <ResponsiveReactGridLayout\r\n          //layouts={{ lg:layout}, {md:layout}, {sm:layout}}\r\n          layouts={{ lg: layout }}\r\n          //breakpoints={{lg: 1200, md: 996, sm: 768}}\r\n          measureBeforeMount={true}\r\n          className=\"layout\"\r\n          autoSize={true}\r\n          rowHeight={this.props.rowHeight}\r\n          isDragable={true}\r\n          isResizable={true}\r\n          onDrag={this.onDragging}\r\n          onDragStop={this.onMoveCard}\r\n          onResizeStop={this.onResizeCard}\r\n          margin={[20, 20]}\r\n        >\r\n          {gridItems.map((item, i) => {\r\n            return (\r\n              <div key={item.id} className=\"grid-item\">\r\n                <h3>{item.name}</h3>\r\n                <div\r\n                  style={{\r\n                    width: \"90%\",\r\n                    height: \"80%\",\r\n                    margin: \"0 auto\",\r\n                  }}\r\n                >\r\n                  <item.chart />\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","/*Primary file to render components\r\n  to the DOM. */\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport Grid from \"./Grid\";\r\n\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n    <Grid />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n"],"sourceRoot":""}