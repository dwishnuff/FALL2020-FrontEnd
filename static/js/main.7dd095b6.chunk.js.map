{"version":3,"sources":["App.js","Benchmark.js","apis/utils.js","apis/pdx_data.js","apis/apiData.js","GenderGrad.js","RaceGrad.js","Persistence.js","Grid.js","reportWebVitals.js","index.js"],"names":["App","class","Benchmark2","props","data","datasets","map","obj","fill","backgroundColor","style","width","height","options","scales","yAxes","ticks","beginAtZero","zip","a","b","len","Math","min","length","res","i","push","baseUrl","process","gradDemo","retention","fetchJson","url","fetch","then","r","json","gradDemoBy","feature","as","gradDemoData","years","totals","results","Object","keys","k","pair","retentionBy","retentionData","init","total","final","ft_init","ft_final","chartData","xArray","yArray","series","labels","label","mergeData","res_labels","d","reduce","e","concat","sort","n","findIndex","splice","mergeArrays","res_datasets","ds","y_temp","Array","entries","v","x","type","legend","display","position","fontColor","fontSize","stacked","xAxes","tooltips","mode","StackedBar","borderColor","LineChart","newdata","slice","borderWidth","cohort_start_size","legal_sex","female","male","grad_or_persisted_cs","MultiType","ResponsiveReactGridLayout","WidthProvider","Responsive","chart2","GenderGrad","chart3","RaceGrad","chart4","Persistence","Grid","state","data1","loaded","this","pdxDataPercents","c","setState","console","log","gridItems","id","name","chart","layouts","lg","y","w","h","measureBeforeMount","className","autoSize","rowHeight","isDragable","isResizable","onDrag","onDragging","onDragStop","onMoveCard","onResizeStop","onResizeCard","margin","item","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yMAceA,MAXf,WACE,OACE,qBAAKC,MAAM,SAAX,SACA,qBAAKA,MAAM,QAAX,SACA,6D,qDCqCJ,SAASC,EAAWC,GAClB,IAYMC,EAAOD,EAAMC,KAGnB,OAFAA,EAAKC,SAAWD,EAAKC,SAASC,KAAI,SAACC,GAAsE,OAA7DA,EAAIC,MAAO,EAAOD,EAAIE,gBAAkB,oBAA4BF,KAK9G,aAFA,CAEA,OACEG,MAAO,CACLC,MAAO,OACPC,OAAQ,QAHZ,SAME,cAAC,OAAD,CAAMR,KAAMA,EAAMS,QAxBN,CACdC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,W,yDCdzB,SAASC,EAAIC,EAAGC,GAIZ,IAHA,IAAMC,EAAMC,KAAKC,IAAIJ,EAAEK,OAAQJ,EAAEI,QAE7BC,EAAM,GACDC,EAAI,EAAGA,EAAIL,EAAKK,IACrBD,EAAIE,KAAK,CAACR,EAAEO,GAAIN,EAAEM,KAGtB,OAAOD,ECnCJ,IAMDG,EAAUC,2BACVC,EAAWF,EAAU,yBACrBG,EAAYH,EAAU,iB,SAEbI,E,8EAAf,WAAyBC,GAAzB,SAAAd,EAAA,+EACWe,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAAOA,EAAEC,WADpC,4C,+BA2BeC,E,8EAAf,WAA0BC,GAA1B,IAAAC,EAAA,mCAAArB,EAAA,6DAAmCqB,EAAnC,+BAAsC,UAAtC,SAC6BR,EAAUF,GADvC,OAYI,IAXIW,EADR,OAEUC,EAAQD,EAAaC,MACrBC,EAASF,EAAa,mBAExBG,EAAU,CACVF,MAAOA,EACPtC,KAAM,IAEC,YAAPoC,IACAI,EAAQxC,KAAKuC,OAASA,GAE1B,MAAcE,OAAOC,KAAKL,EAAaF,IAAvC,eAASQ,EAAyC,KAE1CH,EAAQxC,KAAK2C,GADN,YAAPP,EACkBtB,EAAIyB,EAAQF,EAAaF,GAASQ,IAAIzC,KAAI,SAAA0C,GAAI,OAAIA,EAAK,GAAKA,EAAK,GAAK,OAEtEP,EAAaF,GAASQ,GAhBpD,yBAoBWH,GApBX,6C,+BA+CeK,E,8EAAf,WAA2BV,GAA3B,IAAAC,EAAA,uCAAArB,EAAA,6DAAoCqB,EAApC,+BAAuC,UAAvC,SACgCR,EAAUD,GAD1C,OAsBI,IArBMmB,EADV,OAEUR,EAAQQ,EAAcR,MACxBC,EAAS,CACTQ,KAAMD,EAAc,qBAAqBE,MACzCC,MAAOH,EAAc,wBAAwBE,OAEtC,YAAPZ,IACAG,EAASzB,EAAIyB,EAAOQ,KAAMR,EAAOU,OAAO/C,KAAI,SAAA0C,GAAI,OAAIA,EAAK,GAAKA,EAAK,GAAK,QAGtEM,EAAUJ,EAAc,qBAAqBX,GAC7CgB,EAAWL,EAAc,wBAAwBX,GAInDK,EAAU,CACVF,MAAOA,EACPtC,KAAM,CACFuC,OAAQA,IAGhB,MAAcE,OAAOC,KAAKQ,GAA1B,eAASP,EAA2B,KAChCH,EAAQxC,KAAK2C,GAAK,CACdI,KAAMG,EAAQP,GACdM,MAAOE,EAASR,IAGT,YAAPP,IACAI,EAAQxC,KAAK2C,GAAK7B,EAAI0B,EAAQxC,KAAK2C,GAAGI,KAAMP,EAAQxC,KAAK2C,GAAGM,OAAO/C,KAAI,SAAA0C,GAAI,OAAIA,EAAK,GAAKA,EAAK,GAAK,QA7B/G,yBAiCWJ,GAjCX,6C,sBCjFA,SAASY,EAAUC,EAAQC,GAAoB,IAAZC,EAAW,uDAAJ,GACtC,MAAO,CACHC,OAAQH,EACRpD,SAAU,CACN,CACIwD,MAAOF,EACPvD,KAAMsD,KAQtB,SAASI,EAAUzD,GACf,IADyB,EACnB0D,EAAa1D,EAASC,KAAI,SAAA0D,GAAC,OAAIA,EAAEJ,UAAQK,QAAO,SAAC9C,EAAG+C,GAAJ,OFvB1D,SAAqB/C,EAAGC,GACpB,IAAIM,EAAI,EACJD,EAAM,GACVA,EAAMA,EAAI0C,OAAOhD,GAAGiD,OAHG,oBAIThD,GAJS,yBAIdiD,EAJc,SAMR,KADX3C,EAAID,EAAI6C,WAAU,SAAAJ,GAAC,OAAIG,GAAKH,MAGxBzC,EAAIE,KAAK0C,GACFA,IAAM5C,EAAIC,IAEjBD,EAAI8C,OAAO7C,EAAG,EAAG2C,IAPzB,2BAAkB,IAJK,8BAevB,OAAO5C,EEQyD+C,CAAYrD,EAAG+C,MAE3EO,EAAe,GAHM,cAIVpE,GAJU,IAIzB,2BAAyB,CAAC,IAAD,EAAhBqE,EAAgB,QACjBC,EAAS,IAAIC,MAAMb,EAAWvC,QAAQhB,KAAK,GAD1B,cAEPkE,EAAGrE,UAFI,IAErB,2BAA2B,CAAC,IAAD,EAAlB2D,EAAkB,sBACJU,EAAGd,OAAOiB,WADN,kDACbnD,EADa,KACVoD,EADU,KAEnBH,EAAOZ,EAAWO,WAAU,SAACS,GAAD,OAAOA,IAAMD,MAAMd,EAAE5D,KAAKsB,IAD1D,2BAAyC,IADlB,8BAIvB+C,EAAa9C,KAAK,CAACkC,MAAOG,EAAEH,MAAOzD,KAAMuE,KANxB,gCAJA,8BAczB,MAAO,CAAEf,OAAQG,EAAY1D,SAAUoE,G,4CAc3C,WAA+BO,EAAMzC,GAArC,6BAAApB,EAAA,sDACQM,EAAM,GACNrB,EAAO,GAFf,KAGY4E,EAHZ,OAIa,sBAJb,OAUa,cAVb,uCAKkB1C,EAAWC,EAAS,WAAWJ,MAAK,SAAC6B,GAAO5D,EAAO4D,KALrE,OAMY,UAAcnB,OAAOC,KAAK1C,EAAKA,MAA/B,eAAS2C,EAA6B,KAClCtB,EAAIE,KAAK6B,EAAUpD,EAAKsC,MAAOtC,EAAKA,KAAK2C,GAAIA,IAP7D,oDAWkBE,EAAYV,EAAS,WAAWJ,MAAK,SAAC6B,GAAO5D,EAAO4D,KAXtE,QAYY,UAAcnB,OAAOC,KAAK1C,EAAKA,MAA/B,eAAS2C,EAA6B,KAClCtB,EAAIE,KAAK6B,EAAUpD,EAAKsC,MAAOtC,EAAKA,KAAK2C,GAAIA,IAb7D,iGAmBWe,EAAUrC,IAnBrB,6C,iCCjDMrB,EAAO,CACTwD,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QACzCvD,SAAU,CAER,CACEwD,MAAO,OACPzD,KAAM,CAAC,GAAI,GAAI,GAAI,IAAK,KACxBK,gBAAiB,oBAEnB,CACEoD,MAAO,oBACPzD,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBK,gBAAiB,oBAEnB,CACEoD,MAAO,SACPzD,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,IACvBK,gBAAiB,sBAKjBwE,EAAS,CACbC,SAAS,EACTC,SAAU,SACVvB,OAAQ,CACNwB,UAAW,UACXC,SAAU,KAIRxE,EAAU,CACdC,OAAQ,CACNC,MAAO,CACL,CACEuE,SAAS,EACTtE,MAAO,CACLC,aAAa,KAInBsE,MAAO,CACL,CACED,SAAS,KAIfE,SAAU,CACRC,KAAM,UAWKC,EAPI,kBAGf,cAAC,MAAD,CAAKtF,KAAMA,EAAM6E,OAAQA,EAAQpE,QAASA,KCzD1CT,EAAO,CACTwD,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QACzCvD,SAAU,CACR,CACEwD,MAAO,QACPzD,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,IACvBI,MAAM,EACNC,gBAAiB,kBACjBkF,YAAa,yBAEf,CACE9B,MAAO,4BACPzD,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBI,MAAM,EACNC,gBAAiB,mBACjBkF,YAAa,uBAEf,CACE9B,MAAO,qBACPzD,KAAM,CAAC,EAAG,EAAG,EAAG,GAAI,GACpBI,MAAM,EACNC,gBAAiB,qBACjBkF,YAAa,4BAEf,CACE9B,MAAO,gBACPzD,KAAM,CAAC,EAAE,EAAE,EAAE,GAAG,IAChBI,MAAM,EACNC,gBAAiB,mBACjBkF,YAAa,0BAEf,CACE9B,MAAO,oBACPzD,KAAM,CAAC,EAAE,EAAE,EAAE,GAAG,IAChBI,MAAM,EACNC,gBAAiB,mBACjBkF,YAAa,0BAEf,CACE9B,MAAO,UACPzD,KAAM,CAAC,EAAE,EAAE,EAAE,GAAG,GAChBI,MAAM,EACNC,gBAAiB,mBACjBkF,YAAa,0BAEf,CACE9B,MAAO,QACPzD,KAAM,CAAC,GAAG,GAAG,GAAG,GAAG,KACnBI,MAAM,EACNC,gBAAiB,eACjBkF,YAAa,wBAKbV,EAAS,CACbC,SAAS,EACTC,SAAU,SACVvB,OAAQ,CACNwB,UAAW,UACXC,SAAU,KAIRxE,EAAU,CACdC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,MAKrBuE,SAAU,CACNC,KAAM,UAUGG,EANG,kBAEd,cAAC,OAAD,CAAMxF,KAAMA,EAAM6E,OAAQA,EAAQpE,QAASA,KChF3CgF,E,MAEAzF,EAAO,CACXwD,OAAQiC,EAAQnD,MAAMoD,MAAM,GAAGA,OAAO,GACtCzF,SAAU,CACR,CACE2E,KAAM,OACNnB,MAAO,0BACP8B,YAAa,kBACbI,YAAa,EACbvF,MAAM,EACNJ,KAAMyF,EAAQG,kBAAkB5C,MAAM0C,MAAM,GAAGA,OAAO,IAExD,CACEd,KAAM,OACNnB,MAAO,yBACP8B,YAAa,mBACbI,YAAa,EACbvF,MAAM,EACNJ,KAAMyF,EAAQG,kBAAkBC,UAAUC,OAAOJ,MAAM,GAAGA,OAAO,IAEnE,CACEd,KAAM,OACNnB,MAAO,uBACP8B,YAAa,mBACbI,YAAa,EACbvF,MAAM,EACNJ,KAAMyF,EAAQG,kBAAkBC,UAAUE,KAAKL,MAAM,GAAGA,OAAO,IAEjE,CACId,KAAM,MACNnB,MAAO,oBACPpD,gBAAiB,wBACjBL,KAAMyF,EAAQO,qBAAqBhD,MAAM0C,MAAM,GAAGA,OAAO,IAE7D,CACEd,KAAM,MACNnB,MAAO,mBACPpD,gBAAiB,yBACjBL,KAAMyF,EAAQO,qBAAqBH,UAAUC,OAAOJ,MAAM,GAAGA,OAAO,IAEtE,CACEd,KAAM,MACNnB,MAAO,iBACPpD,gBAAiB,yBACjBL,KAAMyF,EAAQO,qBAAqBH,UAAUE,KAAKL,MAAM,GAAGA,OAAO,MAKlEb,EAAS,CACXC,SAAS,EACTC,SAAU,SACVvB,OAAQ,CACNwB,UAAW,UACXC,SAAU,KAIVxE,EAAU,CACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,MAKrBuE,SAAU,CACNC,KAAM,UAMCY,EAFG,kBAAM,cAAC,MAAD,CAAKjG,KAAMA,EAAM6E,OAAQA,EAAQpE,QAASA,KCpE5DyF,EAA4BC,wBAAcC,cAG1CC,EAASC,EAGTC,EAASC,EAGTC,EAASC,EAuEAC,E,kDApEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,MAAO,GAAIC,QAAQ,GAFtB,E,gEAKO,IAAD,OACbC,KAAKH,MAAME,Q,6CACdE,CAAgB,oBAAqB,aAAajF,MAAK,SAAAkF,GAAC,OAAI,EAAKC,SAAS,CAAEL,MAAOI,EAAGH,QAAQ,S,+BAIxF,IAAD,OACP,IAAKC,KAAKH,MAAME,OAAU,OAAQ,2CAClCK,QAAQC,IAAIL,KAAKH,MAAMC,OAEvB,IAAMQ,EAAY,CAChB,CAAEC,GAAI,EAAGC,KAAM,8BAA+BC,MAAO,WAAO,OAAQ,cAAC1H,EAAD,CAAYE,KAAM,EAAK4G,MAAMC,UACjG,CAAES,GAAI,EAAGC,KAAM,iCAAkCC,MAAOnB,GACxD,CAAEiB,GAAI,EAAGC,KAAM,2BAA4BC,MAAOjB,GAClD,CAAEe,GAAI,EAAGC,KAAM,qBAAqBC,MAAOf,IAU7C,OACI,qBAAK5G,MAAQ,OAAb,SACF,cAACqG,EAAD,CAEEuB,QAAS,CAAEC,GAXA,CACb,CAAEpG,EAAG,IAAKqD,EAAG,EAAGgD,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEvG,EAAG,IAAKqD,EAAG,EAAGgD,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEvG,EAAG,IAAKqD,EAAG,EAAGgD,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEvG,EAAG,IAAKqD,EAAG,EAAGgD,EAAG,EAAGC,EAAG,EAAGC,EAAG,KAS7BC,oBAAoB,EACpBC,UAAU,SACVC,UAAU,EACVC,UAAWlB,KAAKhH,MAAMkI,UACtBC,YAAY,EACZC,aAAa,EACbC,OAAQrB,KAAKsB,WACbC,WAAYvB,KAAKwB,WACjBC,aAAczB,KAAK0B,aACnBC,OAAQ,CAAC,GAAI,IAbf,SAeGrB,EAAUnH,KAAI,SAACyI,EAAMrH,GACpB,OACE,sBAAmByG,UAAU,YAA7B,UACE,6BAAKY,EAAKpB,OACV,qBACEjH,MAAO,CACLC,MAAO,MACPC,OAAQ,MACRkI,OAAQ,UAJZ,SAOE,cAACC,EAAKnB,MAAN,QATMmB,EAAKrB,e,GAjDRsB,IAAMC,WCTVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjH,MAAK,YAAkD,IAA/CkH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.7dd095b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div class=\"banner\">\r\n    <div class=\"title\">\r\n    <h1>Diversity in CS at PSU</h1>\r\n    </div>\r\n \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport { Chart } from 'react-charts'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nexport { Benchmark, Benchmark2 };\r\n\r\nfunction Benchmark() {\r\n  const data = React.useMemo(\r\n    () => [\r\n      {\r\n        label: 'Series 1',\r\n        data: [[0, 1], [1, 2], [2, 4], [3, 2], [4, 7]]\r\n      },\r\n      {\r\n        label: 'Series 2',\r\n        data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\r\n      }\r\n    ],\r\n    []\r\n  )\r\n\r\n  const axes = React.useMemo(\r\n    () => [\r\n      { primary: true, type: 'linear', position: 'bottom' },\r\n      { type: 'linear', position: 'left' }\r\n    ],\r\n    []\r\n  )\r\n\r\n  const lineChart = (\r\n    // A react-chart hyper-responsively and continuously fills the available\r\n    // space of its parent element automatically\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        height: '100%'\r\n      }}\r\n    >\r\n      <Chart data={data} axes={axes} />\r\n    </div>\r\n  )\r\n  return lineChart;\r\n}\r\n\r\nfunction Benchmark2(props) {\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const data = props.data;\r\n  data.datasets = data.datasets.map((obj) => {obj.fill = false; obj.backgroundColor = 'rgb(255, 99, 132)'; return obj});\r\n\r\n  return (\r\n    // A react-chart hyper-responsively and continuously fills the available\r\n    // space of its parent element automatically\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        height: '100%'\r\n      }}\r\n    >\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n}","export { mergeArrays, range, unzip, zip };\r\n\r\n\r\n// sorted merge, keeping exactly one copy of each unique element\r\nfunction mergeArrays(a, b) {\r\n    let i = 0;\r\n    let res = [];\r\n    res = res.concat(a).sort();\r\n    for (let n of b) {\r\n        i = res.findIndex(e => n <= e);\r\n        if (i === -1) {\r\n            // n is the max, so push it to the back\r\n            res.push(n);\r\n        } else if (n !== res[i]) {\r\n            // insert in sorted order\r\n            res.splice(i, 0, n);\r\n        }\r\n        // else if n is already in the array do nothing\r\n    }\r\n    return res;\r\n}\r\n\r\n// Range from start (inclusive) to end (exclusive)\r\nfunction range(start, end, interval=1) {\r\n    const diff = end - start;\r\n    const len = Math.floor(diff / interval + !!(diff % interval));\r\n    return [...Array(len).keys()].map(i => interval * i + start);\r\n}\r\n\r\nfunction unzip(arr) {\r\n    const inner_len = Math.min(...arr.map(a => a.length));\r\n\r\n    return range(0, inner_len).map(i => arr.map(a => a[i]));\r\n}\r\n\r\n// zip :: [A] -> [B] -> [[A, B]]\r\nfunction zip(a, b) {\r\n    const len = Math.min(a.length, b.length);\r\n\r\n    let res = [];\r\n    for (let i = 0; i < len; i++) {\r\n        res.push([a[i], b[i]]);\r\n    }\r\n\r\n    return res;\r\n}","// functions to fetch data from our dataset, stored as JSON\r\n//\r\n// These can be imported directly for use, but it's best to\r\n// use the wrappers provided in `apiData.js`.\r\n\r\nimport { zip } from './utils.js';\r\n\r\nexport { gradDemoBy, retentionBy };\r\n\r\nexport const LEGAL_SEX = \"legal-sex\";\r\nexport const RACE = \"race-ethnicity\";\r\nexport const GENDER = \"gender\";\r\nexport const ORIENTATION = \"sexual-orientation\";\r\nexport const URM = \"urm\"\r\n\r\nconst baseUrl = process.env.PUBLIC_URL + \"/data/\";\r\nconst gradDemo = baseUrl + \"grad_demographics.json\";\r\nconst retention = baseUrl + \"retention.json\";\r\n\r\nasync function fetchJson(url) {\r\n    return fetch(url).then((r) => r.json());\r\n}\r\n\r\n// return CS graduate demographic data partitioned on a feature such as\r\n// race or gender for all years data is available for\r\n//\r\n// valid features are:\r\n//   LEGAL_SEX\r\n//   RACE           (race and ethnicity)\r\n//   GENDER\r\n//   ORIENTATION    (sexual orientation)\r\n//\r\n// as:\r\n//   percent (of total CS graduates)\r\n//   totals\r\n//\r\n// for percents, returned object has the form:\r\n//   {\r\n//     years: [Number],\r\n//     data: {\r\n//       <field>: [Number],\r\n//       ...\r\n//     }\r\n//   }\r\n//\r\n// totals are only returned with the data if not in \"percent\" mode\r\nasync function gradDemoBy(feature, as=\"percent\") {\r\n    let gradDemoData = await fetchJson(gradDemo);\r\n    const years = gradDemoData.years;\r\n    const totals = gradDemoData[\"total-graduates\"];\r\n\r\n    let results = {\r\n        years: years,\r\n        data: {}\r\n    }\r\n    if (as !== \"percent\") {\r\n        results.data.totals = totals;\r\n    }\r\n    for (let k of Object.keys(gradDemoData[feature])) {\r\n        if (as === \"percent\") {\r\n            results.data[k] = zip(totals, gradDemoData[feature][k]).map(pair => pair[1] / pair[0] * 100);\r\n        } else {\r\n            results.data[k] = gradDemoData[feature][k];\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n// return retention per cohort (defined by start year) partitioned\r\n// on a feature for which data are available\r\n//\r\n// valid features are:\r\n//   LEGAL_SEX\r\n//   URM        (true/false: member of an under-represented minority)\r\n//\r\n// as:\r\n//   percent\r\n//   totals\r\n//\r\n// for counts, returned object has the form:\r\n//   {\r\n//     years: [Number],\r\n//     data: {\r\n//       <field>: {\r\n//         init: [Number],\r\n//         final: [Number]\r\n//       },\r\n//       ...\r\n//     }\r\n//   }\r\n// for percentages, data fields are similar in structure to those\r\n// documented for `gradDemoBy`\r\nasync function retentionBy(feature, as=\"percent\") {\r\n    const retentionData = await fetchJson(retention);\r\n    const years = retentionData.years;\r\n    let totals = {\r\n        init: retentionData[\"cohort-start-size\"].total,//.map(Number.parseInt),\r\n        final: retentionData[\"grad-or-persisted-cs\"].total//.map(Number.parseInt),\r\n    };\r\n    if (as === \"percent\") {\r\n        totals = zip(totals.init, totals.final).map(pair => pair[1] / pair[0] * 100);\r\n    }\r\n\r\n    const ft_init = retentionData[\"cohort-start-size\"][feature]\r\n    const ft_final = retentionData[\"grad-or-persisted-cs\"][feature]\r\n\r\n    // filter raw data into an object, keyed by the chosen\r\n    // feature then by initial and final\r\n    let results = {\r\n        years: years,\r\n        data: {\r\n            totals: totals\r\n        }\r\n    };\r\n    for (let k of Object.keys(ft_init)) {\r\n        results.data[k] = {\r\n            init: ft_init[k],//.map(Number.parseInt),\r\n            final: ft_final[k]//.map(Number.parseInt)\r\n        };\r\n\r\n        if (as === \"percent\") {\r\n            results.data[k] = zip(results.data[k].init, results.data[k].final).map(pair => pair[1] / pair[0] * 100);\r\n        }\r\n    }\r\n\r\n    return results;\r\n}","// Wrappers around API calls, intended to return data in structures\r\n// that work nicely with react-charts and similar libraries.\r\n\r\nimport * as ipeds from './ipeds.js';\r\nimport { mergeArrays, range } from './utils.js';\r\nimport { gradDemoBy, retentionBy } from './pdx_data.js';\r\n\r\nexport { chartData, mergeData, pdxDataCounts, pdxDataPercents, queryIpeds };\r\nexport * as ipeds from './ipeds_consts.js';\r\n\r\n// convert arrays of x-values and y-values into an object\r\n// that is directly usable as the data prop of a line chart\r\nfunction chartData(xArray, yArray, series=\"\") {\r\n    return {\r\n        labels: xArray,\r\n        datasets: [\r\n            {\r\n                label: series,\r\n                data: yArray\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n// in-order merge of datasets with possibly-overlapping, sortable\r\n// x-values\r\nfunction mergeData(datasets) {\r\n    const res_labels = datasets.map(d => d.labels).reduce((a, e) => mergeArrays(a, e));\r\n\r\n    let res_datasets = [];\r\n    for (let ds of datasets) {\r\n        let y_temp = new Array(res_labels.length).fill(0);\r\n        for (let d of ds.datasets) {\r\n            for (let [i, v] of ds.labels.entries()) {\r\n                y_temp[res_labels.findIndex((x) => x === v)] = d.data[i];\r\n            }\r\n            res_datasets.push({label: d.label, data: y_temp});\r\n        }\r\n    }\r\n\r\n    return { labels: res_labels, datasets: res_datasets };\r\n}\r\n\r\n// get CS graduate demographic data or CS retention data\r\n// from our JSON data sets as percentages\r\n//\r\n//\r\n// Return values should have the form:\r\n//   [\r\n//     {\r\n//       data: [(Year, Number)],\r\n//       label: <field name>\r\n//     }\r\n//   ]\r\nasync function pdxDataPercents(type, feature) {\r\n    let res = [];\r\n    let data = {};\r\n    switch (type) {\r\n        case \"grad-demographics\":\r\n            await gradDemoBy(feature, \"percent\").then((d) => {data = d;});\r\n            for (let k of Object.keys(data.data)) {\r\n                res.push(chartData(data.years, data.data[k], k));\r\n            }\r\n            break;\r\n        case \"retention\":\r\n            await retentionBy(feature, \"percent\").then((d) => {data = d;});\r\n            for (let k of Object.keys(data.data)) {\r\n                res.push(chartData(data.years, data.data[k], k));\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return mergeData(res);\r\n}\r\n\r\n// get CS graduate demographic data or CS retention data\r\n// from our JSON data sets as counts\r\n//\r\n// Grad demographics return values should be similar to those documented\r\n// for `pdxDataPercentages`\r\n//\r\n// Retention data should be returned in an array with the form:\r\n//   [\r\n//     {\r\n//       data: [(year, Number)],\r\n//       label: \"initial <field name>\"\r\n//     },\r\n//     {\r\n//       data: [(year, Number)],\r\n//       label: \"final <field name>\"\r\n//     },\r\n//     ...\r\n//   ]\r\n// That is, the structure will be the same, but both initial and final values\r\n// will be present in their own series.\r\nasync function pdxDataCounts(type, feature, keepTotals=true) {\r\n    let res = [];\r\n    let data = {};\r\n    switch (type) {\r\n        case \"grad-demographics\":\r\n            await gradDemoBy(feature, \"counts\").then((d) => {data = d;});\r\n            for (let k of Object.keys(data.data)) {\r\n                if (keepTotals || k !== \"totals\") {\r\n                    res.push(chartData(data.years, data.data[k], k));\r\n                }\r\n            }\r\n            break;\r\n        case \"retention\":\r\n            await retentionBy(feature, \"percent\").then((d) => {data = d;});\r\n            for (let k of Object.keys(data.data)) {\r\n                if (keepTotals || k !== \"totals\") {\r\n                    res.push(chartData(data.years, data.data[k].init, \"initial\" + k));\r\n                    res.push(chartData(data.years, data.data[k].final, \"final\" + k));\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return mergeData(res);\r\n}\r\n\r\n// Get time series of various attributes available from the IPEDS dataset\r\n// returns an Array of objects suitable for use with react-charts\r\nfunction queryIpeds(unitid, feature=ipeds.FALL_RETENTION, startYear=ipeds.EARLIEST, endYear=ipeds.LATEST, filters={ftpt: ipeds.ALL, levelOfStudy: ipeds.ALL}) {\r\n    if (!unitid) { return null; }\r\n\r\n    const years = range(startYear, endYear);\r\n    switch (feature) {\r\n        case ipeds.FALL_ENROLLMENT:\r\n            return ipeds.getFallEnrollmentByRace(unitid, startYear, endYear, filters).map(({label, data}) => chartData(years, data, label));\r\n        case ipeds.FALL_RETENTION:\r\n            return [chartData(years, ipeds.getFallRetention(unitid, startYear, endYear, filters))];\r\n        default:\r\n            return null;\r\n    }\r\n}","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\nimport './GenderGrad.css'\r\n\r\n \r\nconst data = {\r\n    labels: ['2015', '2016', '2017', '2018', '2019'],\r\n    datasets: [\r\n    \r\n      {\r\n        label: 'Male',\r\n        data: [86, 95, 98, 130, 155],\r\n        backgroundColor: 'rgb(249, 153, 0)',\r\n      },\r\n      {\r\n        label: 'Legal Sex Unknown',\r\n        data: [1, 2, 2, 1, 2],\r\n        backgroundColor: 'rgb(192,192,192)',\r\n      },\r\n      {\r\n        label: 'Female',\r\n        data: [10, 19, 12, 15, 22],\r\n        backgroundColor: 'rgb(252, 70, 26)' ,\r\n      }\r\n    ],\r\n  }\r\n  \r\n  const legend = {\r\n    display: true,\r\n    position: \"bottom\",\r\n    labels: {\r\n      fontColor: \"#323130\",\r\n      fontSize: 14\r\n    }\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          stacked: true,\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          stacked: true,\r\n        },\r\n      ],\r\n    },\r\n    tooltips: {\r\n      mode: 'label',\r\n  }\r\n  }\r\n  \r\n  const StackedBar = () => (\r\n    \r\n      \r\n      <Bar data={data} legend={legend} options={options} />\r\n   \r\n  )\r\n  \r\n  export default StackedBar","import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nconst data = {\r\n    labels: ['2015', '2016', '2017', '2018', '2019'],\r\n    datasets: [\r\n      {\r\n        label: 'Asian',\r\n        data: [11, 18, 18, 13, 24],\r\n        fill: false,\r\n        backgroundColor: 'rgb(37, 45, 72)',\r\n        borderColor: 'rgba(37, 45, 72, 0.5)',\r\n      },\r\n      {\r\n        label: 'Black or African American',\r\n        data: [1, 4, 2, 1, 1],\r\n        fill: false,\r\n        backgroundColor: 'rgb(249, 153, 0)',\r\n        borderColor: 'rgba(249, 153, 0.5)',\r\n      },\r\n      {\r\n        label: 'Hispanic or Latino',\r\n        data: [4, 8, 6, 15, 6],\r\n        fill: false,\r\n        backgroundColor: 'rgb(242, 119, 117)',\r\n        borderColor: 'rgba(242, 119, 117, 0.5)',\r\n      },\r\n      {\r\n        label: 'International',\r\n        data: [6,4,7,18,17],\r\n        fill: false,\r\n        backgroundColor: 'rgb(0, 109, 140)',\r\n        borderColor: 'rgba(0, 109, 140, 0.5)',\r\n      },\r\n      {\r\n        label: 'Two or More Races',\r\n        data: [2,4,6,10,10],\r\n        fill: false,\r\n        backgroundColor: 'rgb(252, 70, 26)',\r\n        borderColor: 'rgba(252, 70, 26, 0.5)',\r\n      },\r\n      {\r\n        label: 'Unknown',\r\n        data: [7,8,9,12,9],\r\n        fill: false,\r\n        backgroundColor: 'rgb(192,192,192)',\r\n        borderColor: 'rgba(192,192,192, 0.5)',\r\n      },\r\n      {\r\n        label: 'White',\r\n        data: [66,70,64,77,112],\r\n        fill: false,\r\n        backgroundColor: 'rgb(0, 0, 0)',\r\n        borderColor: 'rgba(0, 0, 0, 0.5)',\r\n      }\r\n    ],\r\n  }\r\n  \r\n  const legend = {\r\n    display: true,\r\n    position: \"bottom\",\r\n    labels: {\r\n      fontColor: \"#323130\",\r\n      fontSize: 14\r\n    }\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    tooltips: {\r\n        mode: 'label',\r\n    }\r\n  }\r\n  \r\n  const LineChart = () => (\r\n    \r\n      <Line data={data} legend={legend} options={options} />\r\n    \r\n  )\r\n  \r\n  export default LineChart","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport chartdata from \"./data/retention.json\";\r\n\r\nconst newdata = chartdata;\r\n\r\nconst data = {\r\n  labels: newdata.years.slice(1).slice(-5), //get the last 5 years of data with slice\r\n  datasets: [\r\n    {\r\n      type: \"line\",\r\n      label: \"Overall Starting Cohort\",\r\n      borderColor: \"rgb(37, 45, 72)\",\r\n      borderWidth: 2,\r\n      fill: false,\r\n      data: newdata.cohort_start_size.total.slice(1).slice(-5),\r\n    },\r\n    {\r\n      type: \"line\",\r\n      label: \"Female Starting Cohort\",\r\n      borderColor: \"rgb(252, 70, 26)\",\r\n      borderWidth: 2,\r\n      fill: false,\r\n      data: newdata.cohort_start_size.legal_sex.female.slice(1).slice(-5),\r\n    },\r\n    {\r\n      type: \"line\",\r\n      label: \"Male Starting Cohort\",\r\n      borderColor: \"rgb(249, 153, 0)\",\r\n      borderWidth: 2,\r\n      fill: false,\r\n      data: newdata.cohort_start_size.legal_sex.male.slice(1).slice(-5),\r\n    },\r\n    {\r\n        type: \"bar\",\r\n        label: \"Overall Persisted\",\r\n        backgroundColor: \"rgba(37, 45, 72, 0.8)\",\r\n        data: newdata.grad_or_persisted_cs.total.slice(1).slice(-5),\r\n      },\r\n    {\r\n      type: \"bar\",\r\n      label: \"Female Persisted\",\r\n      backgroundColor: \"rgba(252, 70, 26, 0.8)\",\r\n      data: newdata.grad_or_persisted_cs.legal_sex.female.slice(1).slice(-5),\r\n    },\r\n    {\r\n      type: \"bar\",\r\n      label: \"Male Persisted\",\r\n      backgroundColor: \"rgba(249, 153, 0, 0.8)\",\r\n      data: newdata.grad_or_persisted_cs.legal_sex.male.slice(1).slice(-5),\r\n    },\r\n  ],\r\n};\r\n\r\nconst legend = {\r\n    display: true,\r\n    position: \"bottom\",\r\n    labels: {\r\n      fontColor: \"#323130\",\r\n      fontSize: 14\r\n    }\r\n  };\r\n\r\nconst options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    tooltips: {\r\n        mode: 'label',\r\n    }\r\n  }\r\n\r\nconst MultiType = () => <Bar data={data} legend={legend} options={options}/>;\r\n\r\nexport default MultiType;\r\n\r\n","import React from \"react\";\r\nimport \"./Grid.css\";\r\nimport { Benchmark2 } from \"./Benchmark.js\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\nimport { pdxDataPercents } from \"./apis/apiData\";\r\nimport GenderGrad from \"./GenderGrad.js\";\r\nimport RaceGrad from \"./RaceGrad.js\";\r\nimport Persistence from \"./Persistence.js\";\r\n//https://www.npmjs.com/package/react-grid-layout#installation\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\n//placeholder for second chart\r\nconst chart2 = GenderGrad;\r\n\r\n//placeholder for third chart\r\nconst chart3 = RaceGrad;\r\n\r\n//placeholder for fourth chart\r\nconst chart4 = Persistence;\r\n\r\nclass Grid extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { data1: {}, loaded: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.state.loaded) {\r\n      pdxDataPercents(\"grad-demographics\", \"legal-sex\").then(c => this.setState({ data1: c, loaded: true }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.loaded) { return (<p>Loading...</p>)}\r\n    console.log(this.state.data1);\r\n\r\n    const gridItems = [\r\n      { id: 1, name: \"PSU compared to Tier One CS\", chart: () => {return (<Benchmark2 data={this.state.data1} />)}},\r\n      { id: 2, name: \"PSU CS Grad Class by Legal Sex\", chart: chart2},\r\n      { id: 3, name: \"PSU CS Grad by Ethnicity\", chart: chart3},\r\n      { id: 4, name: \"PSU CS Persistence\",chart: chart4},\r\n    ];\r\n\r\n    const layout = [\r\n      { i: \"1\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"2\", x: 5, y: 0, w: 5, h: 3 },\r\n      { i: \"3\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"4\", x: 5, y: 0, w: 5, h: 3 },\r\n    ];\r\n\r\n    return (\r\n        <div class = \"grid\">\r\n      <ResponsiveReactGridLayout\r\n        //layouts={{ lg:layout}, {md:layout}, {sm:layout}}\r\n        layouts={{ lg: layout }}\r\n        //breakpoints={{lg: 1200, md: 996, sm: 768}}\r\n        measureBeforeMount={true}\r\n        className=\"layout\"\r\n        autoSize={true}\r\n        rowHeight={this.props.rowHeight}\r\n        isDragable={true}\r\n        isResizable={true}\r\n        onDrag={this.onDragging}\r\n        onDragStop={this.onMoveCard}\r\n        onResizeStop={this.onResizeCard}\r\n        margin={[20, 20]}\r\n      >\r\n        {gridItems.map((item, i) => {\r\n          return (\r\n            <div key={item.id} className=\"grid-item\">\r\n              <h3>{item.name}</h3>\r\n              <div\r\n                style={{\r\n                  width: \"90%\",\r\n                  height: \"80%\",\r\n                  margin: \"0 auto\"\r\n                }}\r\n              >\r\n                <item.chart />\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport Grid from \"./Grid\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n    <Grid />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}