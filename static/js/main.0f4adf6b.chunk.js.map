{"version":3,"sources":["App.js","Benchmark.js","Grid.js","reportWebVitals.js","index.js"],"names":["App","Benchmark","data","React","useMemo","label","axes","primary","type","position","style","width","height","ResponsiveReactGridLayout","WidthProvider","Responsive","chart1","chart2","chart3","chart4","Grid","gridItems","id","name","chart","class","layouts","lg","i","x","y","w","h","measureBeforeMount","className","autoSize","rowHeight","this","props","isDragable","isResizable","onDrag","onDragging","onDragStop","onMoveCard","onResizeStop","onResizeCard","margin","map","item","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gPASeA,MANf,WACE,OACE,yD,gDCmCWC,MArCf,WACE,IAAMC,EAAOC,IAAMC,SACjB,iBAAM,CACJ,CACEC,MAAO,WACPH,KAAM,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,KAE7C,CACEG,MAAO,WACPH,KAAM,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,QAG/C,IAGII,EAAOH,IAAMC,SACjB,iBAAM,CACJ,CAAEG,SAAS,EAAMC,KAAM,SAAUC,SAAU,UAC3C,CAAED,KAAM,SAAUC,SAAU,WAE9B,IAeF,OATE,qBACEC,MAAO,CACLC,MAAO,OACPC,OAAQ,QAHZ,SAME,cAAC,QAAD,CAAOV,KAAMA,EAAMI,KAAMA,O,QC7BzBO,EAA4BC,wBAAcC,cAG1CC,EAASf,EAGTgB,EAAShB,EAGTiB,EAASjB,EAGTkB,EAASlB,EAyDAmB,E,uKArDX,IAAMC,EAAY,CAChB,CAAEC,GAAI,EAAGC,KAAM,8BAA+BC,MAAOR,GACrD,CAAEM,GAAI,EAAGC,KAAM,sBAAuBC,MAAOP,GAC7C,CAAEK,GAAI,EAAGC,KAAM,wBAAyBC,MAAON,GAC/C,CAAEI,GAAI,EAAGC,KAAM,uBAAuBC,MAAOL,IAU/C,OACI,qBAAKM,MAAQ,OAAb,SACF,cAACZ,EAAD,CAEEa,QAAS,CAAEC,GAXA,CACb,CAAEC,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEJ,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEJ,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC/B,CAAEJ,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,KAS7BC,oBAAoB,EACpBC,UAAU,SACVC,UAAU,EACVC,UAAWC,KAAKC,MAAMF,UACtBG,YAAY,EACZC,aAAa,EACbC,OAAQJ,KAAKK,WACbC,WAAYN,KAAKO,WACjBC,aAAcR,KAAKS,aACnBC,OAAQ,CAAC,GAAI,IAbf,SAeG1B,EAAU2B,KAAI,SAACC,EAAMrB,GACpB,OACE,sBAAmBM,UAAU,YAA7B,UACE,6BAAKe,EAAK1B,OACV,qBACEb,MAAO,CACLC,MAAO,MACPC,OAAQ,MACRmC,OAAQ,UAJZ,SAOE,cAACE,EAAKzB,MAAN,QATMyB,EAAK3B,e,GAnCRnB,IAAM+C,WCRVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0f4adf6b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <h1>Diversity in CS at PSU</h1>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport { Chart } from 'react-charts'\r\n \r\nfunction Benchmark() {\r\n  const data = React.useMemo(\r\n    () => [\r\n      {\r\n        label: 'Series 1',\r\n        data: [[0, 1], [1, 2], [2, 4], [3, 2], [4, 7]]\r\n      },\r\n      {\r\n        label: 'Series 2',\r\n        data: [[0, 3], [1, 1], [2, 5], [3, 6], [4, 4]]\r\n      }\r\n    ],\r\n    []\r\n  )\r\n \r\n  const axes = React.useMemo(\r\n    () => [\r\n      { primary: true, type: 'linear', position: 'bottom' },\r\n      { type: 'linear', position: 'left' }\r\n    ],\r\n    []\r\n  )\r\n \r\n  const lineChart = (\r\n    // A react-chart hyper-responsively and continuously fills the available\r\n    // space of its parent element automatically\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n        height: '100%'\r\n      }}\r\n    >\r\n      <Chart data={data} axes={axes} />\r\n    </div>\r\n  )\r\n  return lineChart;\r\n}\r\nexport default Benchmark;                              ","import React from \"react\";\r\nimport \"./Grid.css\";\r\nimport Benchmark from \"./Benchmark.js\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\n//https://www.npmjs.com/package/react-grid-layout#installation\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n\r\n//placeholder for a benchmark chart\r\nconst chart1 = Benchmark;\r\n\r\n//placeholder for second chart\r\nconst chart2 = Benchmark;\r\n\r\n//placeholder for third chart\r\nconst chart3 = Benchmark;\r\n\r\n//placeholder for fourth chart\r\nconst chart4 = Benchmark;\r\n\r\nclass Grid extends React.Component {\r\n  render() {\r\n    const gridItems = [\r\n      { id: 1, name: \"PSU compared to Tier One CS\", chart: chart1},\r\n      { id: 2, name: \"Chart Two Goes Here\", chart: chart2},\r\n      { id: 3, name: \"Chart Three Goes Here\", chart: chart3},\r\n      { id: 4, name: \"Chart Four Goes Here\",chart: chart4},\r\n    ];\r\n\r\n    const layout = [\r\n      { i: \"1\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"2\", x: 5, y: 0, w: 5, h: 3 },\r\n      { i: \"3\", x: 0, y: 0, w: 5, h: 3 },\r\n      { i: \"4\", x: 5, y: 0, w: 5, h: 3 },\r\n    ];\r\n\r\n    return (\r\n        <div class = \"grid\">\r\n      <ResponsiveReactGridLayout\r\n        //layouts={{ lg:layout}, {md:layout}, {sm:layout}}\r\n        layouts={{ lg: layout }}\r\n        //breakpoints={{lg: 1200, md: 996, sm: 768}}\r\n        measureBeforeMount={true}\r\n        className=\"layout\"\r\n        autoSize={true}\r\n        rowHeight={this.props.rowHeight}\r\n        isDragable={true}\r\n        isResizable={true}\r\n        onDrag={this.onDragging}\r\n        onDragStop={this.onMoveCard}\r\n        onResizeStop={this.onResizeCard}\r\n        margin={[20, 20]}\r\n      >\r\n        {gridItems.map((item, i) => {\r\n          return (\r\n            <div key={item.id} className=\"grid-item\">\r\n              <h3>{item.name}</h3>\r\n              <div\r\n                style={{\r\n                  width: \"90%\",\r\n                  height: \"80%\",\r\n                  margin: \"0 auto\"\r\n                }}\r\n              >\r\n                <item.chart />\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Grid from \"./Grid\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <div>\n    <App />\n    <Grid />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}